/**
 * Author: Ryan A. Kueter
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
using System;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.IO.Compression;
using System.Xml;
using System.Xml.Linq;
using System.Threading.Tasks;
using System.Collections.Specialized;
using System.Runtime.InteropServices;

namespace FreeDataExports.Spreadsheets.XL2019
{
    /// <summary>
    /// The xlsx class
    /// </summary>
    public sealed class XLSX2019 : IDataWorkbook
    {
        public XLSX2019()
        {
            Worksheets = new List<Worksheet>();
            SharedStrings = new OrderedDictionary();
            Errors = new List<string>();
        }

        internal List<Worksheet> Worksheets { get; set; } // List of worksheets

        /// <summary>
        /// Adds a worksheet to the workbook
        /// </summary>
        /// <param name="Name">Worksheet name</param>
        public IDataWorksheet AddWorksheet(string Name)
        {
            var w = new Worksheet(Name);
            Worksheets.Add(w);
            return w;
        }
        public string CreatedBy { get; set; } = "AutoGenerated"; // Metadata - CreatedBy
        public decimal FontSize { get; set; } = 11; // The font size for the cells

        /// <summary>
        /// Deduplicates strings for faster performance and smaller size
        /// </summary>
        private OrderedDictionary SharedStrings { get; set; }

        /// <summary>
        /// Asynchronous save method
        /// </summary>
        /// <param name="path"></param>
        /// <returns></returns>
        public Task SaveAsync(string path)
        {
            return Task.Run(() => {
                var bytes = GetBytes();
                using (FileStream SourceStream = File.Open(path, FileMode.Create))
                {
                    SourceStream.Seek(0, SeekOrigin.End);
                    SourceStream.Write(bytes, 0, bytes.Length);
                }
            });
        }

        /// <summary>
        /// Synchronous save method
        /// </summary>
        /// <param name="path"></param>
        public void Save(string path)
        {
            var bytes = GetBytes();
            File.WriteAllBytes(path, bytes);
        }

        /// <summary>
        /// An asynchronous GetBytes method
        /// </summary>
        /// <returns></returns>
        public Task<byte[]> GetBytesAsync()
        {
            return Task.Run(() => {
                return GetBytes();
            });
        }

        /// <summary>
        /// A synchronous GetBytes method
        /// </summary>
        /// <returns></returns>
        public byte[] GetBytes()
        {
            InitializeDocumentVariables();

            byte[] bytes = null;
            using (var memoryStream = new MemoryStream())
            {
                // Create an entry
                using (var archive = new ZipArchive(memoryStream, ZipArchiveMode.Create, true))
                {
                    // Create [Content_Types].xml
                    AddEntry(archive, "[Content_Types].xml", GetContent_Types());

                    // Create xl/workbook.xml
                    AddEntry(archive, "xl/workbook.xml", xl_workbook());

                    // Create xl/styles.xml
                    AddEntry(archive, "xl/styles.xml", xl_styles());

                    // Create xl/sharedStrings.xml
                    AddEntry(archive, "xl/sharedStrings.xml", xl_sharedStrings());

                    // Create the worksheets
                    for (int i = 0; i < Worksheets.Count; i++)
                    {
                        AddEntry(archive, $"xl/worksheets/sheet{Worksheets[i].Id}.xml", Worksheets[i].xl_worksheets_sheet(SharedStrings));
                    }

                    // Create xl/theme/theme1.xml
                    AddEntry(archive, "xl/theme/theme1.xml", xl_theme_theme1());

                    // Create xl/_rels/workbook.xml.rels
                    AddEntry(archive, "xl/_rels/workbook.xml.rels", xl__rels_workbook());

                    // Create docProps/core.xml
                    AddEntry(archive, "docProps/core.xml", docProps_core());

                    // Create docProps/app.xml
                    AddEntry(archive, "docProps/app.xml", docProps_app());

                    // Create _rels/.rels
                    AddEntry(archive, "_rels/.rels", _rels_rels());
                }

                bytes = memoryStream.ToArray();
            }

            return bytes;
        }

        /// <summary>
        /// Adds an entry to the zip archive
        /// </summary>
        /// <param name="archive">The archive</param>
        /// <param name="e">Entry path</param>
        /// <param name="x">Document to insert</param>
        private void AddEntry(ZipArchive archive, string e, XDocument doc)
        {
            var entry = archive.CreateEntry(e);
            using (var entryStream = entry.Open())
            {
                using (var writer = new XmlTextWriter(entryStream, System.Text.Encoding.UTF8))
                {
                    writer.Formatting = Formatting.Indented;
                    doc.WriteTo(writer);
                }
            }
        }

        /// <summary>
        /// A hardcoded list of data definitions
        /// </summary>
        private List<DataDefinition> FormatCodes = new List<DataDefinition>() {
            // Currency
            new DataDefinition() { type = 2, numFmtId = "8", formatCode = @"""$""#,##0.00" },
            // Percent
            new DataDefinition() { type = 3, numFmtId = "14", formatCode = @"0.00%" },
            // DateTime
            new DataDefinition() { type = 4, numFmtId = "166", formatCode = @"[$-409]m/d/yyyy\ h:mm:ss\ AM/PM;@" },
            // Decimal
            new DataDefinition() { type = 5, numFmtId = "164", formatCode = "0.0000" },
            // Date
            new DataDefinition() { type = 6, numFmtId = "19", formatCode = @"m/d/yyyy" },
            // Time
            new DataDefinition() { type = 7, numFmtId = "23", formatCode = @"h:mm\ AM/PM" },
            // LongDate
            new DataDefinition() { type = 8, numFmtId = "167", formatCode = @"[$-F800]dddd\,\ mmmm\ dd\,\ yyyy" },
            // MilitaryDateTime
            new DataDefinition() { type = 9, numFmtId = "168", formatCode = @"m/d/yyyy\ h:mm:ss;@" },
            // MilitaryTime
            new DataDefinition() { type = 10, numFmtId = "169", formatCode = @"h:mm:ss;@" }
        };

        /// <summary>
        /// A method that allows reformating data types
        /// </summary>
        /// <param name="type">The datatype</param>
        /// <param name="format">The data format</param>
        public void Format(DataType type, string format)
        {
            for (int i = 0; i < FormatCodes.Count; i++)
            {
                if (FormatCodes[i].type == (int)type)
                {
                    FormatCodes[i].formatCode = format;
                }
            }
        }

        /// <summary>
        /// A list of cell formats
        /// </summary>
        private List<DataDefinition> CellFormats = new List<DataDefinition>();

        /// <summary>
        /// A method that initializes the document variables
        /// </summary>
        private void InitializeDocumentVariables()
        {
            int worksheetId = 0;
            int cellindex = 0;

#if NET6_0_OR_GREATER
            // Iterate the worksheets
            var sheets = CollectionsMarshal.AsSpan(Worksheets);
            for (int i = 0; i < sheets.Length; i++)
            {
                sheets[i].Id = ++worksheetId;

                // Iterate the rows
                for (int r = 0; r < sheets[i].Rows.Count; r++)
                {
                    // Iterate the cells
                    for (int c = 0; c < sheets[i].Rows[r].Count; c++)
                    {
                        // Iterate the format codes
                        for (int f = 0; f < FormatCodes.Count; f++)
                        {
                            var dtype = (int)sheets[i].Rows[r][c].DataType;
                            if (dtype == FormatCodes[f].type)
                            {
                                if (CellFormats.Contains(FormatCodes[f]) == false)
                                {
                                    FormatCodes[f].index = ++cellindex;
                                    CellFormats.Add(FormatCodes[f]);
                                }
                            }
                        }

                        if (String.IsNullOrEmpty(sheets[i].Rows[r][c].Errors) == false)
                        {
                            // Since the index starts at 0, we need to add 1
                            string msg = $"Error on '{sheets[i].Name}' in cell {Utilities.GetIndex(c + 1)}{r + 1}: {sheets[i].Rows[r][c].Errors}";
                            Errors.Add(msg);
                        }
                    }
                }
                sheets[i].CellFormats = CellFormats;
            }
#elif NETSTANDARD2_0_OR_GREATER
            // Iterate the worksheets
            for (int i = 0; i < Worksheets.Count; i++)
            {
                Worksheets[i].Id = ++worksheetId;

                // Iterate the rows
                for (int r = 0; r < Worksheets[i].Rows.Count; r++)
                {
                    // Iterate the cells
                    for (int c = 0; c < Worksheets[i].Rows[r].Count; c++)
                    {
                        // Iterate the format codes
                        for (int f = 0; f < FormatCodes.Count; f++)
                        {
                            var dtype = (int)Worksheets[i].Rows[r][c].DataType;
                            if (dtype == FormatCodes[f].type)
                            {
                                if (CellFormats.Contains(FormatCodes[f]) == false)
                                {
                                    FormatCodes[f].index = ++cellindex;
                                    CellFormats.Add(FormatCodes[f]);
                                }
                            }
                        }

                        if (String.IsNullOrEmpty(Worksheets[i].Rows[r][c].Errors) == false)
                        {
                            // Since the index starts at 0, we need to add 1
                            string msg = $"Error on '{Worksheets[i].Name}' in cell {Utilities.GetIndex(c + 1)}{r + 1}: {Worksheets[i].Rows[r][c].Errors}";
                            Errors.Add(msg);
                        }
                    }
                }
                Worksheets[i].CellFormats = CellFormats;
            }
#endif

            if (AddErrors == true)
            {
                AddErrorsTab(++worksheetId);
            }
        }

        private bool AddErrors { get; set; }
        private List<string> Errors { get; set; } // The list of errors 
        /// <summary>
        /// A method that gets the data type conversion errors.
        /// </summary>
        /// <returns></returns>
        public string GetErrors()
        {
            var sb = new StringBuilder();
            for (int i = 0; i < Errors.Count; i++)
            {
                sb.AppendLine(Errors[i]);
            }
            return sb.ToString();
        }
        /// <summary>
        /// Adds the datatype conversion errors to a worksheet
        /// </summary>
        public void AddErrorsWorksheet()
        {
            AddErrors = true;
        }
        /// <summary>
        /// Builds the errors worksheet.
        /// </summary>
        /// <param name="id"></param>
        private void AddErrorsTab(int id)
        {
            if (Errors.Count > 0)
            {
                var e = new Worksheet("Errors");
                e.Id = id;
                for (int i = 0; i < Errors.Count; i++)
                {
                    e.AddRow().AddCell(Errors[i], DataType.String);
                }
                e.TabColor = "FFC00000";
                Worksheets.Add(e);
            }
        }
        /// <summary>
        /// Stores the content types
        /// </summary>
        /// <returns></returns>
        internal XDocument GetContent_Types()
        {
            XNamespace xmlns = "http://schemas.openxmlformats.org/package/2006/content-types";

            var types = new XElement("Types");
            types.Add(new XAttribute("xmlns", xmlns));
            types.Add(new XElement("Default", new XAttribute("Extension", "rels"), new XAttribute("ContentType", "application/vnd.openxmlformats-package.relationships+xml")));
            types.Add(new XElement("Default", new XAttribute("Extension", "xml"), new XAttribute("ContentType", "application/xml")));
            types.Add(new XElement("Override", new XAttribute("PartName", "/xl/workbook.xml"), new XAttribute("ContentType", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml")));
            for (int i = 0; i < Worksheets.Count; i++)
            {
                types.Add(new XElement("Override", new XAttribute("PartName", $"/xl/worksheets/sheet{Worksheets[i].Id}.xml"), new XAttribute("ContentType", "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml")));
            }
            types.Add(new XElement("Override", new XAttribute("PartName", "/xl/theme/theme1.xml"), new XAttribute("ContentType", "application/vnd.openxmlformats-officedocument.theme+xml")));
            types.Add(new XElement("Override", new XAttribute("PartName", "/xl/styles.xml"), new XAttribute("ContentType", "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml")));
            types.Add(new XElement("Override", new XAttribute("PartName", "/xl/sharedStrings.xml"), new XAttribute("ContentType", "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml")));
            types.Add(new XElement("Override", new XAttribute("PartName", "/docProps/core.xml"), new XAttribute("ContentType", "application/vnd.openxmlformats-package.core-properties+xml")));
            types.Add(new XElement("Override", new XAttribute("PartName", "/docProps/app.xml"), new XAttribute("ContentType", "application/vnd.openxmlformats-officedocument.extended-properties+xml")));

            return new XDocument(new XDeclaration("1.0", "UTF-8", "yes"), types);
        }
        /// <summary>
        /// The workbook data
        /// </summary>
        /// <returns></returns>
        internal XDocument xl_workbook()
        {
            XNamespace xmlns = "http://schemas.openxmlformats.org/spreadsheetml/2006/main";
            XNamespace mc = "http://schemas.openxmlformats.org/markup-compatibility/2006";
            XNamespace r = "http://schemas.openxmlformats.org/officeDocument/2006/relationships";
            XNamespace x15 = "http://schemas.microsoft.com/office/spreadsheetml/2010/11/main";
            XNamespace x15ac = "http://schemas.microsoft.com/office/spreadsheetml/2010/11/ac";
            XNamespace xr = "http://schemas.microsoft.com/office/spreadsheetml/2014/revision";
            XNamespace xr6 = "http://schemas.microsoft.com/office/spreadsheetml/2016/revision6";
            XNamespace xr10 = "http://schemas.microsoft.com/office/spreadsheetml/2016/revision10";
            XNamespace xr2 = "http://schemas.microsoft.com/office/spreadsheetml/2015/revision2";

            var sheets = new XElement("sheets");

            for (int i = 0; i < Worksheets.Count; i++)
            {
                sheets.Add(new XElement("sheet", new XAttribute("name", Worksheets[i].Name), new XAttribute("sheetId", $"{Worksheets[i].Id}"), new XAttribute(r + "id", $"rId{Worksheets[i].Id}")));
            }

            var workbook = new XElement("workbook",
                    new XAttribute("xmlns", xmlns),
                    new XAttribute(XNamespace.Xmlns + "r", r),
                    new XAttribute(XNamespace.Xmlns + "mc", mc),
                    new XAttribute(mc + "Ignorable", "x15 xr xr6 xr10 xr2"),
                    new XAttribute(XNamespace.Xmlns + "x15", x15),
                    new XAttribute(XNamespace.Xmlns + "xr", xr),
                    new XAttribute(XNamespace.Xmlns + "xr6", xr6),
                    new XAttribute(XNamespace.Xmlns + "xr10", xr10),
                    new XAttribute(XNamespace.Xmlns + "xr2", xr2),
                    new XElement("fileVersion", new XAttribute("appName", "xl"), new XAttribute("lastEdited", "7"), new XAttribute("lowestEdited", "7"), new XAttribute("rupBuild", "23628")),
                    new XElement("workbookPr"),
                    new XElement(mc + "AlternateContent",
                        new XAttribute(XNamespace.Xmlns + "mc", mc),
                        new XElement(mc + "Choice", new XAttribute("Requires", "x15"),
                            new XElement(x15ac + "absPath",
                                new XAttribute("url", @"C:\"),
                                new XAttribute(XNamespace.Xmlns + "x15ac", x15ac)))),
                    new XElement(xr + "revisionPtr", new XAttribute("revIDLastSave", "0"), new XAttribute("documentId", $"8_{Utilities.NewGuid()}"), new XAttribute(xr6 + "coauthVersionLast", "46"), new XAttribute(xr6 + "coauthVersionMax", "46"), new XAttribute(xr10 + "uidLastSave", "{00000000-0000-0000-0000-000000000000}")),
                    new XElement("bookViews",
                        new XElement("workbookView", new XAttribute("xWindow", "-120"), new XAttribute("yWindow", "-120"), new XAttribute("windowWidth", "29040"), new XAttribute("windowHeight", "15840"), new XAttribute(xr2 + "uid", Guid.NewGuid().ToString("B").ToUpper()))),
                    sheets,
                    new XElement("calcPr", new XAttribute("calcId", "191029")),
                    new XElement("extLst",
                        new XElement("ext", new XAttribute("uri", "{140A7094-0E35-4892-8432-C4D2E57EDEB5}"), new XAttribute(XNamespace.Xmlns + "x15", x15),
                            new XElement(x15 + "workbookPr", new XAttribute("chartTrackingRefBase", "1")))));

            return new XDocument(new XDeclaration("1.0", "UTF-8", "yes"), workbook);
        }

        /// <summary>
        /// Stores the styles for the workbook
        /// </summary>
        /// <returns></returns>
        internal XDocument xl_styles()
        {
            XNamespace xmlns = "http://schemas.openxmlformats.org/spreadsheetml/2006/main";
            XNamespace mc = "http://schemas.openxmlformats.org/markup-compatibility/2006";
            XNamespace x14ac = "http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac";
            XNamespace x16r2 = "http://schemas.microsoft.com/office/spreadsheetml/2015/02/main";
            XNamespace xr = "http://schemas.microsoft.com/office/spreadsheetml/2014/revision";
            XNamespace x14 = "http://schemas.microsoft.com/office/spreadsheetml/2009/9/main";
            XNamespace x15 = "http://schemas.microsoft.com/office/spreadsheetml/2010/11/main";

            var numFmts = new XElement("numFmts", new XAttribute("count", $"{CellFormats.Count}"));
            for (int i = 0; i < CellFormats.Count; i++)
            {
                numFmts.Add(new XElement("numFmt", new XAttribute("numFmtId", CellFormats[i].numFmtId), new XAttribute("formatCode", CellFormats[i].formatCode)));
            }

            XElement cellXfs = new XElement("cellXfs", new XAttribute("count", $"{CellFormats.Count + 1}"));
            cellXfs.Add(new XElement("xf", new XAttribute("numFmtId", "0"), new XAttribute("fontId", "0"), new XAttribute("fillId", "0"), new XAttribute("borderId", "0"), new XAttribute("xfId", "0")));
            for (int i = 0; i < CellFormats.Count; i++)
            {
                cellXfs.Add(new XElement("xf", new XAttribute("numFmtId", CellFormats[i].numFmtId), new XAttribute("fontId", "0"), new XAttribute("fillId", "0"), new XAttribute("borderId", "0"), new XAttribute("xfId", "0"), new XAttribute("applyNumberFormat", "1")));
            }

            return new XDocument(
               new XDeclaration("1.0", "UTF-8", "yes"),
               new XElement("styleSheet",
                    new XAttribute("xmlns", xmlns),
                    new XAttribute(XNamespace.Xmlns + "mc", mc),
                    new XAttribute(mc + "Ignorable", "x14ac x16r2 xr"),
                    new XAttribute(XNamespace.Xmlns + "x14ac", x14ac),
                    new XAttribute(XNamespace.Xmlns + "x16r2", x16r2),
                    new XAttribute(XNamespace.Xmlns + "xr", xr),
                    numFmts,
                    new XElement("fonts", new XAttribute("count", "1"), new XAttribute(x14ac + "knownFonts", "1"), 
                        new XElement("font", 
                            new XElement("sz", new XAttribute("val", FontSize.ToString())),
                            new XElement("color", new XAttribute("theme", "1")),
                            new XElement("name", new XAttribute("val", "Calibri")),
                            new XElement("family", new XAttribute("val", "2")),
                            new XElement("scheme", new XAttribute("val", "minor")))),
                    new XElement("fills", new XAttribute("count", "2"),
                        new XElement("fill", new XElement("patternFill", new XAttribute("patternType", "none"))),
                        new XElement("fill", new XElement("patternFill", new XAttribute("patternType", "gray125")))),
                    new XElement("borders", new XAttribute("count", "1"),
                        new XElement("border", 
                            new XElement("left"), 
                            new XElement("right"),
                            new XElement("top"),
                            new XElement("bottom"),
                            new XElement("diagonal"))),
                    new XElement("cellStyleXfs", new XAttribute("count", "1"),
                        new XElement("xf", new XAttribute("numFmtId", "0"), new XAttribute("fontId", "0"), new XAttribute("fillId", "0"), new XAttribute("borderId", "0"))),
                    cellXfs,
                    new XElement("cellStyles", new XAttribute("count", "1"),
                        new XElement("cellStyle", new XAttribute("name", "Normal"), new XAttribute("xfId", "0"), new XAttribute("builtinId", "0"))),
                    new XElement("dxfs", new XAttribute("count", "0")),
                    new XElement("tableStyles", new XAttribute("count", "0"), new XAttribute("defaultTableStyle", "TableStyleMedium2"), new XAttribute("defaultPivotStyle", "PivotStyleLight16")),
                    new XElement("extLst",
                        new XElement("ext", new XAttribute("uri", "{EB79DEF2-80B8-43e5-95BD-54CBDDF9020C}"), new XAttribute(XNamespace.Xmlns + "x14", x14),
                            new XElement(x14 + "slicerStyles", new XAttribute("defaultSlicerStyle", "SlicerStyleLight1"))),
                        new XElement("ext", new XAttribute("uri", "{9260A510-F301-46a8-8635-F512D64BE5F5}"), new XAttribute(XNamespace.Xmlns + "x15", x15),
                            new XElement(x15 + "timelineStyles", new XAttribute("defaultTimelineStyle", "TimeSlicerStyleLight1"))))
                ));
        }

        /// <summary>
        /// Deduplicates strings to increase speed and decrease size
        /// </summary>
        /// <returns></returns>
        internal XDocument xl_sharedStrings()
        {
            XNamespace xmlns = "http://schemas.openxmlformats.org/spreadsheetml/2006/main";

            int Count = 0;
            int uniqueCount = 0;

#if NET6_0_OR_GREATER
            // Iterate the worksheets
            var sheets = CollectionsMarshal.AsSpan(Worksheets);
            for (int i = 0; i < sheets.Length; i++)
            {
                // Add the rows
                if (sheets[i].Rows.Count > 0)
                {
                    // Iterate the rows
                    for (int r = 0; r < sheets[i].Rows.Count; r++)
                    {
                        // Iterate the cells
                        for (int c = 0; c < sheets[i].Rows[r].Count; c++)
                        {
                            if (sheets[i].Rows[r][c].DataType == DataType.String)
                            {
                                if (SharedStrings.Contains(sheets[i].Rows[r][c].Value) == false)
                                {
                                    // Add it to the list for tracking purposes
                                    SharedStrings.Add(sheets[i].Rows[r][c].Value, uniqueCount);
                                    uniqueCount++;
                                    Count++;
                                }
                                else
                                {
                                    Count++;
                                }
                            }
                        }
                    }
                }
            }
#elif NETSTANDARD2_0_OR_GREATER
            // Iterate the worksheets
            for (int i = 0; i < Worksheets.Count; i++)
            {
                // Add the rows
                if (Worksheets[i].Rows.Count > 0)
                {
                    // Iterate the rows
                    for (int r = 0; r < Worksheets[i].Rows.Count; r++)
                    {
                        // Iterate the cells
                        for (int c = 0; c < Worksheets[i].Rows[r].Count; c++)
                        {
                            if (Worksheets[i].Rows[r][c].DataType == DataType.String)
                            {
                                if (SharedStrings.Contains(Worksheets[i].Rows[r][c].Value) == false)
                                {
                                    // Add it to the list for tracking purposes
                                    SharedStrings.Add(Worksheets[i].Rows[r][c].Value, uniqueCount);
                                    uniqueCount++;
                                    Count++;
                                }
                                else
                                {
                                    Count++;
                                }
                            }
                        }
                    }
                }
            }
#endif


            var sst = new XElement("sst");
            sst.Add(new XAttribute("xmlns", xmlns));
            sst.Add(new XAttribute("Count", Count));
            sst.Add(new XAttribute("uniqueCount", uniqueCount));

            ICollection KeyCollection = SharedStrings.Keys;

            String[] keys = new String[SharedStrings.Count];
            KeyCollection.CopyTo(keys, 0);

            for (int i = 0; i < SharedStrings.Count; i++)
            {
                sst.Add(new XElement("si", new XElement("t", keys[i])));
            }

            return new XDocument(new XDeclaration("1.0", "UTF-8", "yes"), sst);
        }
        /// <summary>
        /// Stores the theme?
        /// </summary>
        /// <returns></returns>
        internal XDocument xl_theme_theme1()
        {
            XNamespace a = "http://schemas.openxmlformats.org/drawingml/2006/main";
            XNamespace thm15 = "http://schemas.microsoft.com/office/thememl/2012/main";

            return new XDocument(
               new XDeclaration("1.0", "UTF-8", "yes"),
               new XElement(a + "theme",
                    new XAttribute(XNamespace.Xmlns + "a", a),
                    new XAttribute("name", "Office Theme"),
                    new XElement(a + "themeElements",
                        new XElement(a + "clrScheme", new XAttribute("name", "Office"),
                            new XElement(a + "dk1",
                                new XElement(a + "sysClr", new XAttribute("val", "windowText"), new XAttribute("lastClr", "000000"))),
                            new XElement(a + "lt1",
                                new XElement(a + "sysClr", new XAttribute("val", "window"), new XAttribute("lastClr", "FFFFFF"))),
                            new XElement(a + "dk2",
                                new XElement(a + "srgbClr", new XAttribute("val", "44546A"))),
                            new XElement(a + "lt2",
                                new XElement(a + "srgbClr", new XAttribute("val", "E7E6E6"))),
                            new XElement(a + "accent1",
                                new XElement(a + "srgbClr", new XAttribute("val", "4472C4"))),
                            new XElement(a + "accent2",
                                new XElement(a + "srgbClr", new XAttribute("val", "ED7D31"))),
                            new XElement(a + "accent3",
                                new XElement(a + "srgbClr", new XAttribute("val", "A5A5A5"))),
                            new XElement(a + "accent4",
                                new XElement(a + "srgbClr", new XAttribute("val", "FFC000"))),
                            new XElement(a + "accent5",
                                new XElement(a + "srgbClr", new XAttribute("val", "5B9BD5"))),
                            new XElement(a + "accent6",
                                new XElement(a + "srgbClr", new XAttribute("val", "70AD47"))),
                            new XElement(a + "hlink",
                                new XElement(a + "srgbClr", new XAttribute("val", "0563C1"))),
                            new XElement(a + "folHlink",
                                new XElement(a + "srgbClr", new XAttribute("val", "954F72")))),
                        new XElement(a + "fontScheme", new XAttribute("name", "Office"),
                            new XElement(a + "majorFont",
                                new XElement(a + "latin", new XAttribute("typeface", "Calibri Light"), new XAttribute("panose", "020F0302020204030204")),
                                new XElement(a + "ea", new XAttribute("typeface", "")),
                                new XElement(a + "cs", new XAttribute("typeface", "")),
                                new XElement(a + "font", new XAttribute("script", "Jpan"), new XAttribute("typeface", "游ゴシック Light")),
                                new XElement(a + "font", new XAttribute("script", "Hang"), new XAttribute("typeface", "맑은 고딕")),
                                new XElement(a + "font", new XAttribute("script", "Hans"), new XAttribute("typeface", "等线 Light")),
                                new XElement(a + "font", new XAttribute("script", "Hant"), new XAttribute("typeface", "新細明體")),
                                new XElement(a + "font", new XAttribute("script", "Arab"), new XAttribute("typeface", "Times New Roman")),
                                new XElement(a + "font", new XAttribute("script", "Hebr"), new XAttribute("typeface", "Times New Roman")),
                                new XElement(a + "font", new XAttribute("script", "Thai"), new XAttribute("typeface", "Tahoma")),
                                new XElement(a + "font", new XAttribute("script", "Ethi"), new XAttribute("typeface", "Nyala")),
                                new XElement(a + "font", new XAttribute("script", "Beng"), new XAttribute("typeface", "Vrinda")),
                                new XElement(a + "font", new XAttribute("script", "Gujr"), new XAttribute("typeface", "Shruti")),
                                new XElement(a + "font", new XAttribute("script", "Khmr"), new XAttribute("typeface", "MoolBoran")),
                                new XElement(a + "font", new XAttribute("script", "Knda"), new XAttribute("typeface", "Tunga")),
                                new XElement(a + "font", new XAttribute("script", "Guru"), new XAttribute("typeface", "Raavi")),
                                new XElement(a + "font", new XAttribute("script", "Cans"), new XAttribute("typeface", "Euphemia")),
                                new XElement(a + "font", new XAttribute("script", "Cher"), new XAttribute("typeface", "Plantagenet Cherokee")),
                                new XElement(a + "font", new XAttribute("script", "Yiii"), new XAttribute("typeface", "Microsoft Yi Baiti")),
                                new XElement(a + "font", new XAttribute("script", "Tibt"), new XAttribute("typeface", "Microsoft Himalaya")),
                                new XElement(a + "font", new XAttribute("script", "Thaa"), new XAttribute("typeface", "MV Boli")),
                                new XElement(a + "font", new XAttribute("script", "Deva"), new XAttribute("typeface", "Mangal")),
                                new XElement(a + "font", new XAttribute("script", "Telu"), new XAttribute("typeface", "Gautami")),
                                new XElement(a + "font", new XAttribute("script", "Taml"), new XAttribute("typeface", "Latha")),
                                new XElement(a + "font", new XAttribute("script", "Syrc"), new XAttribute("typeface", "Estrangelo Edessa")),
                                new XElement(a + "font", new XAttribute("script", "Orya"), new XAttribute("typeface", "Kalinga")),
                                new XElement(a + "font", new XAttribute("script", "Mlym"), new XAttribute("typeface", "Kartika")),
                                new XElement(a + "font", new XAttribute("script", "Laoo"), new XAttribute("typeface", "DokChampa")),
                                new XElement(a + "font", new XAttribute("script", "Sinh"), new XAttribute("typeface", "Iskoola Pota")),
                                new XElement(a + "font", new XAttribute("script", "Mong"), new XAttribute("typeface", "Mongolian Baiti")),
                                new XElement(a + "font", new XAttribute("script", "Viet"), new XAttribute("typeface", "Times New Roman")),
                                new XElement(a + "font", new XAttribute("script", "Uigh"), new XAttribute("typeface", "Microsoft Uighur")),
                                new XElement(a + "font", new XAttribute("script", "Geor"), new XAttribute("typeface", "Sylfaen")),
                                new XElement(a + "font", new XAttribute("script", "Armn"), new XAttribute("typeface", "Arial")),
                                new XElement(a + "font", new XAttribute("script", "Bugi"), new XAttribute("typeface", "Leelawadee UI")),
                                new XElement(a + "font", new XAttribute("script", "Bopo"), new XAttribute("typeface", "Microsoft JhengHei")),
                                new XElement(a + "font", new XAttribute("script", "Java"), new XAttribute("typeface", "Javanese Text")),
                                new XElement(a + "font", new XAttribute("script", "Lisu"), new XAttribute("typeface", "Segoe UI")),
                                new XElement(a + "font", new XAttribute("script", "Mymr"), new XAttribute("typeface", "Myanmar Text")),
                                new XElement(a + "font", new XAttribute("script", "Nkoo"), new XAttribute("typeface", "Ebrima")),
                                new XElement(a + "font", new XAttribute("script", "Olck"), new XAttribute("typeface", "Nirmala UI")),
                                new XElement(a + "font", new XAttribute("script", "Osma"), new XAttribute("typeface", "Ebrima")),
                                new XElement(a + "font", new XAttribute("script", "Phag"), new XAttribute("typeface", "Phagspa")),
                                new XElement(a + "font", new XAttribute("script", "Syrn"), new XAttribute("typeface", "Estrangelo Edessa")),
                                new XElement(a + "font", new XAttribute("script", "Syrj"), new XAttribute("typeface", "Estrangelo Edessa")),
                                new XElement(a + "font", new XAttribute("script", "Syre"), new XAttribute("typeface", "Estrangelo Edessa")),
                                new XElement(a + "font", new XAttribute("script", "Sora"), new XAttribute("typeface", "Nirmala UI")),
                                new XElement(a + "font", new XAttribute("script", "Tale"), new XAttribute("typeface", "Microsoft Tai Le")),
                                new XElement(a + "font", new XAttribute("script", "Talu"), new XAttribute("typeface", "Microsoft New Tai Lue")),
                                new XElement(a + "font", new XAttribute("script", "Tfng"), new XAttribute("typeface", "Ebrima"))),
                            new XElement(a + "minorFont",
                                new XElement(a + "latin", new XAttribute("typeface", "Calibri"), new XAttribute("panose", "020F0502020204030204")),
                                new XElement(a + "ea", new XAttribute("typeface", "")),
                                new XElement(a + "cs", new XAttribute("typeface", "")),
                                new XElement(a + "font", new XAttribute("script", "Jpan"), new XAttribute("typeface", "游ゴシック")),
                                new XElement(a + "font", new XAttribute("script", "Hang"), new XAttribute("typeface", "맑은 고딕")),
                                new XElement(a + "font", new XAttribute("script", "Hans"), new XAttribute("typeface", "等线")),
                                new XElement(a + "font", new XAttribute("script", "Hant"), new XAttribute("typeface", "新細明體")),
                                new XElement(a + "font", new XAttribute("script", "Arab"), new XAttribute("typeface", "Arial")),
                                new XElement(a + "font", new XAttribute("script", "Hebr"), new XAttribute("typeface", "Arial")),
                                new XElement(a + "font", new XAttribute("script", "Thai"), new XAttribute("typeface", "Tahoma")),
                                new XElement(a + "font", new XAttribute("script", "Ethi"), new XAttribute("typeface", "Nyala")),
                                new XElement(a + "font", new XAttribute("script", "Beng"), new XAttribute("typeface", "Vrinda")),
                                new XElement(a + "font", new XAttribute("script", "Gujr"), new XAttribute("typeface", "Shruti")),
                                new XElement(a + "font", new XAttribute("script", "Khmr"), new XAttribute("typeface", "DaunPenh")),
                                new XElement(a + "font", new XAttribute("script", "Knda"), new XAttribute("typeface", "Tunga")),
                                new XElement(a + "font", new XAttribute("script", "Guru"), new XAttribute("typeface", "Raavi")),
                                new XElement(a + "font", new XAttribute("script", "Cans"), new XAttribute("typeface", "Euphemia")),
                                new XElement(a + "font", new XAttribute("script", "Cher"), new XAttribute("typeface", "Plantagenet Cherokee")),
                                new XElement(a + "font", new XAttribute("script", "Yiii"), new XAttribute("typeface", "Microsoft Yi Baiti")),
                                new XElement(a + "font", new XAttribute("script", "Tibt"), new XAttribute("typeface", "Microsoft Himalaya")),
                                new XElement(a + "font", new XAttribute("script", "Thaa"), new XAttribute("typeface", "MV Boli")),
                                new XElement(a + "font", new XAttribute("script", "Deva"), new XAttribute("typeface", "Mangal")),
                                new XElement(a + "font", new XAttribute("script", "Telu"), new XAttribute("typeface", "Gautami")),
                                new XElement(a + "font", new XAttribute("script", "Taml"), new XAttribute("typeface", "Latha")),
                                new XElement(a + "font", new XAttribute("script", "Syrc"), new XAttribute("typeface", "Estrangelo Edessa")),
                                new XElement(a + "font", new XAttribute("script", "Orya"), new XAttribute("typeface", "Kalinga")),
                                new XElement(a + "font", new XAttribute("script", "Mlym"), new XAttribute("typeface", "Kartika")),
                                new XElement(a + "font", new XAttribute("script", "Laoo"), new XAttribute("typeface", "DokChampa")),
                                new XElement(a + "font", new XAttribute("script", "Sinh"), new XAttribute("typeface", "Iskoola Pota")),
                                new XElement(a + "font", new XAttribute("script", "Mong"), new XAttribute("typeface", "Mongolian Baiti")),
                                new XElement(a + "font", new XAttribute("script", "Viet"), new XAttribute("typeface", "Arial")),
                                new XElement(a + "font", new XAttribute("script", "Uigh"), new XAttribute("typeface", "Microsoft Uighur")),
                                new XElement(a + "font", new XAttribute("script", "Geor"), new XAttribute("typeface", "Sylfaen")),
                                new XElement(a + "font", new XAttribute("script", "Armn"), new XAttribute("typeface", "Arial")),
                                new XElement(a + "font", new XAttribute("script", "Bugi"), new XAttribute("typeface", "Leelawadee UI")),
                                new XElement(a + "font", new XAttribute("script", "Bopo"), new XAttribute("typeface", "Microsoft JhengHei")),
                                new XElement(a + "font", new XAttribute("script", "Java"), new XAttribute("typeface", "Javanese Text")),
                                new XElement(a + "font", new XAttribute("script", "Lisu"), new XAttribute("typeface", "Segoe UI")),
                                new XElement(a + "font", new XAttribute("script", "Mymr"), new XAttribute("typeface", "Myanmar Text")),
                                new XElement(a + "font", new XAttribute("script", "Nkoo"), new XAttribute("typeface", "Ebrima")),
                                new XElement(a + "font", new XAttribute("script", "Olck"), new XAttribute("typeface", "Nirmala UI")),
                                new XElement(a + "font", new XAttribute("script", "Osma"), new XAttribute("typeface", "Ebrima")),
                                new XElement(a + "font", new XAttribute("script", "Phag"), new XAttribute("typeface", "Phagspa")),
                                new XElement(a + "font", new XAttribute("script", "Syrn"), new XAttribute("typeface", "Estrangelo Edessa")),
                                new XElement(a + "font", new XAttribute("script", "Syrj"), new XAttribute("typeface", "Estrangelo Edessa")),
                                new XElement(a + "font", new XAttribute("script", "Syre"), new XAttribute("typeface", "Estrangelo Edessa")),
                                new XElement(a + "font", new XAttribute("script", "Sora"), new XAttribute("typeface", "Nirmala UI")),
                                new XElement(a + "font", new XAttribute("script", "Tale"), new XAttribute("typeface", "Microsoft Tai Le")),
                                new XElement(a + "font", new XAttribute("script", "Talu"), new XAttribute("typeface", "Microsoft New Tai Lue")),
                                new XElement(a + "font", new XAttribute("script", "Tfng"), new XAttribute("typeface", "Ebrima")))),
                        new XElement(a + "fmtScheme", new XAttribute("name", "Office"),
                            new XElement(a + "fillStyleLst",
                                new XElement(a + "solidFill",
                                    new XElement(a + "schemeClr", new XAttribute("val", "phClr"))),
                                new XElement(a + "gradFill", new XAttribute("rotWithShape", "1"),
                                    new XElement(a + "gsLst",
                                        new XElement(a + "gs", new XAttribute("pos", "0"),
                                            new XElement(a + "schemeClr", new XAttribute("val", "phClr"),
                                                new XElement(a + "lumMod", new XAttribute("val", "110000")),
                                                new XElement(a + "satMod", new XAttribute("val", "105000")),
                                                new XElement(a + "tint", new XAttribute("val", "67000")))),
                                        new XElement(a + "gs", new XAttribute("pos", "50000"),
                                            new XElement(a + "schemeClr", new XAttribute("val", "phClr"),
                                                new XElement(a + "lumMod", new XAttribute("val", "105000")),
                                                new XElement(a + "satMod", new XAttribute("val", "103000")),
                                                new XElement(a + "tint", new XAttribute("val", "73000")))),
                                        new XElement(a + "gs", new XAttribute("pos", "100000"),
                                            new XElement(a + "schemeClr", new XAttribute("val", "phClr"),
                                                new XElement(a + "lumMod", new XAttribute("val", "105000")),
                                                new XElement(a + "satMod", new XAttribute("val", "109000")),
                                                new XElement(a + "tint", new XAttribute("val", "81000"))))),
                                    new XElement(a + "lin", new XAttribute("ang", "5400000"), new XAttribute("scaled", "0"))),
                                new XElement(a + "gradFill", new XAttribute("rotWithShape", "1"),
                                    new XElement(a + "gsLst",
                                        new XElement(a + "gs", new XAttribute("pos", "0"),
                                            new XElement(a + "schemeClr", new XAttribute("val", "phClr"),
                                                new XElement(a + "satMod", new XAttribute("val", "103000")),
                                                new XElement(a + "lumMod", new XAttribute("val", "102000")),
                                                new XElement(a + "tint", new XAttribute("val", "94000")))),
                                        new XElement(a + "gs", new XAttribute("pos", "50000"),
                                            new XElement(a + "schemeClr", new XAttribute("val", "phClr"),
                                                new XElement(a + "satMod", new XAttribute("val", "110000")),
                                                new XElement(a + "lumMod", new XAttribute("val", "100000")),
                                                new XElement(a + "shade", new XAttribute("val", "100000")))),
                                        new XElement(a + "gs", new XAttribute("pos", "100000"),
                                            new XElement(a + "schemeClr", new XAttribute("val", "phClr"),
                                                new XElement(a + "lumMod", new XAttribute("val", "99000")),
                                                new XElement(a + "satMod", new XAttribute("val", "120000")),
                                                new XElement(a + "shade", new XAttribute("val", "78000"))))),
                                    new XElement(a + "lin", new XAttribute("ang", "5400000"), new XAttribute("scaled", "0")))),
                            new XElement(a + "lnStyleLst",
                                new XElement(a + "ln", new XAttribute("w", "6350"), new XAttribute("cap", "flat"), new XAttribute("cmpd", "sng"), new XAttribute("algn", "ctr"),
                                    new XElement(a + "solidFill",
                                        new XElement(a + "schemeClr", new XAttribute("val", "phClr"))),
                                    new XElement(a + "prstDash", new XAttribute("val", "solid")),
                                    new XElement(a + "miter", new XAttribute("lim", "800000"))),
                                new XElement(a + "ln", new XAttribute("w", "12700"), new XAttribute("cap", "flat"), new XAttribute("cmpd", "sng"), new XAttribute("algn", "ctr"),
                                    new XElement(a + "solidFill",
                                        new XElement(a + "schemeClr", new XAttribute("val", "phClr"))),
                                    new XElement(a + "prstDash", new XAttribute("val", "solid")),
                                    new XElement(a + "miter", new XAttribute("lim", "800000"))),
                                new XElement(a + "ln", new XAttribute("w", "19050"), new XAttribute("cap", "flat"), new XAttribute("cmpd", "sng"), new XAttribute("algn", "ctr"),
                                    new XElement(a + "solidFill",
                                        new XElement(a + "schemeClr", new XAttribute("val", "phClr"))),
                                    new XElement(a + "prstDash", new XAttribute("val", "solid")),
                                    new XElement(a + "miter", new XAttribute("lim", "800000")))),
                            new XElement(a + "effectStyleLst",
                                new XElement(a + "effectStyle",
                                    new XElement(a + "effectLst")),
                                new XElement(a + "effectStyle",
                                    new XElement(a + "effectLst")),
                                new XElement(a + "effectStyle",
                                    new XElement(a + "effectLst",
                                        new XElement(a + "outerShdw", new XAttribute("blurRad", "57150"), new XAttribute("dist", "19050"), new XAttribute("dir", "5400000"), new XAttribute("algn", "ctr"), new XAttribute("rotWithShape", "0"),
                                            new XElement(a + "srgbClr", new XAttribute("val", "000000"),
                                                new XElement(a + "alpha", new XAttribute("val", "63000"))))))),
                            new XElement(a + "bgFillStyleLst",
                                new XElement(a + "solidFill",
                                    new XElement(a + "schemeClr", new XAttribute("val", "phClr"))),
                                new XElement(a + "solidFill",
                                    new XElement(a + "schemeClr", new XAttribute("val", "phClr"),
                                        new XElement(a + "tint", new XAttribute("val", "95000")),
                                        new XElement(a + "satMod", new XAttribute("val", "170000")))),
                                new XElement(a + "gradFill", new XAttribute("rotWithShape", "1"),
                                    new XElement(a + "gsLst",
                                        new XElement(a + "gs", new XAttribute("pos", "0"),
                                            new XElement(a + "schemeClr", new XAttribute("val", "phClr"),
                                                new XElement(a + "tint", new XAttribute("val", "93000")),
                                                new XElement(a + "satMod", new XAttribute("val", "150000")),
                                                new XElement(a + "shade", new XAttribute("val", "98000")),
                                                new XElement(a + "lumMod", new XAttribute("val", "102000")))),
                                        new XElement(a + "gs", new XAttribute("pos", "50000"),
                                            new XElement(a + "schemeClr", new XAttribute("val", "phClr"),
                                                new XElement(a + "tint", new XAttribute("val", "98000")),
                                                new XElement(a + "satMod", new XAttribute("val", "130000")),
                                                new XElement(a + "shade", new XAttribute("val", "90000")),
                                                new XElement(a + "lumMod", new XAttribute("val", "103000")))),
                                        new XElement(a + "gs", new XAttribute("pos", "100000"),
                                            new XElement(a + "schemeClr", new XAttribute("val", "phClr"),
                                                 new XElement(a + "shade", new XAttribute("val", "63000")),
                                                new XElement(a + "satMod", new XAttribute("val", "120000"))))),
                                    new XElement(a + "lin", new XAttribute("ang", "5400000"), new XAttribute("scaled", "0")))))),
                    new XElement(a + "objectDefaults"),
                    new XElement(a + "extraClrSchemeLst"),
                    new XElement(a + "extLst",
                        new XElement(a + "ext", new XAttribute("uri", "{05A4C25C-085E-4340-85A3-A5531E510DB2}"),
                            new XElement(thm15 + "themeFamily",
                                new XAttribute(XNamespace.Xmlns + "thm15", thm15),
                                new XAttribute("name", "Office Theme"),
                                new XAttribute("id", "{62F939B6-93AF-4DB8-9C6B-D6C7DFDC589F}"),
                                new XAttribute("vid", "{4A3C46E8-61CC-4603-A589-7422A47A8E4A}"))))));
        }
        /// <summary>
        /// Relationships between files
        /// </summary>
        /// <returns></returns>
        internal XDocument xl__rels_workbook()
        {
            XNamespace xmlns = "http://schemas.openxmlformats.org/package/2006/relationships";

            var relationships = new XElement("Relationships");
            relationships.Add(new XAttribute("xmlns", xmlns));

            int i = 1;
            for (int n = 0; n < Worksheets.Count; n++)
            {
                relationships.Add(new XElement("Relationship", new XAttribute("Id", $"rId{i}"), new XAttribute("Type", "http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet"), new XAttribute("Target", $"worksheets/sheet{i}.xml")));
                i++;
            }

            relationships.Add(new XElement("Relationship", new XAttribute("Id", $"rId{i++}"), new XAttribute("Type", "http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme"), new XAttribute("Target", "theme/theme1.xml")));           
            relationships.Add(new XElement("Relationship", new XAttribute("Id", $"rId{i++}"), new XAttribute("Type", "http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles"), new XAttribute("Target", "styles.xml")));
            
            // Needed only if a sheet has data
            relationships.Add(new XElement("Relationship", new XAttribute("Id", $"rId{i++}"), new XAttribute("Type", "http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings"), new XAttribute("Target", "sharedStrings.xml")));

            return new XDocument(new XDeclaration("1.0", "UTF-8", "yes"), relationships);
        }

        /// <summary>
        /// Document properties / file metadata
        /// </summary>
        /// <returns></returns>
        internal XDocument docProps_core()
        {
            XNamespace cp = "http://schemas.openxmlformats.org/package/2006/metadata/core-properties";
            XNamespace dc = "http://purl.org/dc/elements/1.1/";
            XNamespace dcterms = "http://purl.org/dc/terms/";
            XNamespace dcmitype = "http://purl.org/dc/dcmitype/";
            XNamespace xsi = "http://www.w3.org/2001/XMLSchema-instance";
            return new XDocument(
               new XDeclaration("1.0", "UTF-8", "yes"),
               new XElement(cp + "coreProperties",
                    new XAttribute(XNamespace.Xmlns + "cp", cp),
                    new XAttribute(XNamespace.Xmlns + "dc", dc),
                    new XAttribute(XNamespace.Xmlns + "dcterms", dcterms),
                    new XAttribute(XNamespace.Xmlns + "dcmitype", dcmitype),
                    new XAttribute(XNamespace.Xmlns + "xsi", xsi),
                    new XElement(dc + "creator", CreatedBy),
                    new XElement(cp + "lastModifiedBy", CreatedBy),
                    new XElement(dcterms + "created", Utilities.XlsxTimestamp(), new XAttribute(xsi + "type", "dcterms:W3CDTF")),
                    new XElement(dcterms + "modified", Utilities.XlsxTimestamp(), new XAttribute(xsi + "type", "dcterms:W3CDTF"))));
        }

        /// <summary>
        /// Other document properties
        /// </summary>
        /// <returns></returns>
        internal XDocument docProps_app()
        {
            XNamespace xmlns = "http://schemas.openxmlformats.org/officeDocument/2006/extended-properties";
            XNamespace vt = "http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes";


            var vector = new XElement(vt + "vector", new XAttribute("size", Worksheets.Count), new XAttribute("baseType", "lpstr"));
            for (int i = 0; i < Worksheets.Count; i++)
            {
                vector.Add(new XElement(vt + "lpstr", Worksheets[i].Name));
            }

            var properties = new XElement("Properties",
                    new XAttribute("xmlns", xmlns),
                    new XAttribute(XNamespace.Xmlns + "vt", vt),
                    new XElement("Application", "Microsoft Excel"),
                    new XElement("DocSecurity", "0"),
                    new XElement("ScaleCrop", "false"),
                    new XElement("HeadingPairs",
                        new XElement(vt + "vector", new XAttribute("size", "2"), new XAttribute("baseType", "variant"),
                            new XElement(vt + "variant",
                                new XElement(vt + "lpstr", "Worksheets")),
                            new XElement(vt + "variant",
                                new XElement(vt + "i4", Worksheets.Count)))),
                    new XElement("TitlesOfParts", vector),
                    new XElement("Company", ""),
                    new XElement("LinksUpToDate", "false"),
                    new XElement("SharedDoc", "false"),
                    new XElement("HyperlinksChanged", "false"),
                    new XElement("AppVersion", "16.0300"));

            return new XDocument(new XDeclaration("1.0", "UTF-8", "yes"), properties);
        }
        /// <summary>
        /// Relationships
        /// </summary>
        /// <returns></returns>
        internal XDocument _rels_rels()
        {
            XNamespace xmlns = "http://schemas.openxmlformats.org/package/2006/relationships";
            return new XDocument(
               new XDeclaration("1.0", "UTF-8", "yes"),
               new XElement("Relationships",
                    new XAttribute("xmlns", xmlns),
                    new XElement("Relationship", new XAttribute("Id", "rId3"), new XAttribute("Type", "http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties"), new XAttribute("Target", "docProps/app.xml")),
                    new XElement("Relationship", new XAttribute("Id", "rId2"), new XAttribute("Type", "http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties"), new XAttribute("Target", "docProps/core.xml")),
                    new XElement("Relationship", new XAttribute("Id", "rId1"), new XAttribute("Type", "http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument"), new XAttribute("Target", "xl/workbook.xml"))));
        }
    }
}
