/**
 * Author: Ryan A. Kueter
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
using System;
using System.Text;
using System.Collections.Generic;
using System.IO;
using System.IO.Compression;
using System.Xml;
using System.Xml.Linq;
using System.Threading.Tasks;
using System.Runtime.InteropServices;

namespace FreeDataExports.Spreadsheets.Ods1_3
{
    /// <summary>
    /// The main class
    /// </summary>
    public sealed class ODSv1_3 : IDataWorkbook
    {
        public ODSv1_3()
        {
            Worksheets = new List<Worksheet>();
            Errors = new List<string>();
        }

        internal List<Worksheet> Worksheets { get; set; } // List of worksheets

        /// <summary>
        /// Adds a worksheet to the workbook
        /// </summary>
        /// <param name="Name">Worksheet name</param>
        public IDataWorksheet AddWorksheet(string Name)
        {
            var w = new Worksheet(Name);
            Worksheets.Add(w);
            return w;
        }
        public string CreatedBy { get; set; } = "AutoGenerated"; // Specify the user who created the file.
        public decimal FontSize { get; set; } = 11; // Specify a font size for cells.

        /// <summary>
        /// Used for formating the decimal datatype.
        /// </summary>
        private int NumberDecimals { get; set; } = 4;

        /// <summary>
        /// The following are used for configuring
        /// the currency datatype.
        /// </summary>
        private int CurrencyDecimals { get; set; } = 2;
        private string CurrencySymbol { get; set; } = "$";
        private string CurrencyLanguage { get; set; } = "en";
        private string CurrencyCountry { get; set; } = "US";

        /// <summary>
        /// Allows you to configure the datatypes,
        /// e.g., allowing the user to expand the precision on decimals.
        /// </summary>
        /// <param name="type"></param>
        /// <param name="format"></param>
        public void Format(DataType type, string format)
        {
            string[] formats = format.Split(',');
            switch (type)
            {
                case DataType.Decimal:
                    if (format.StartsWith("decimals=".ToLower()))
                    {
                        NumberDecimals = Convert.ToInt32(format.ToLower().Replace("decimals=", ""));
                    }
                    break;
                case DataType.Currency:
                    for (int i = 0; i < formats.Length; i++)
                    {
                        if (formats[i].StartsWith("symbol=".ToLower()))
                        {
                            CurrencySymbol = formats[i].ToLower().Replace("symbol=", "");
                        }
                        if (formats[i].StartsWith("language=".ToLower()))
                        {
                            CurrencyLanguage = formats[i].ToLower().Replace("language=", "");
                        }
                        if (formats[i].StartsWith("country=".ToLower()))
                        {
                            CurrencyCountry = formats[i].ToLower().Replace("country=", "").ToUpper();
                        }
                        if (formats[i].StartsWith("decimals=".ToLower()))
                        {
                            CurrencyDecimals = Convert.ToInt32(formats[i].ToLower().Replace("decimals=", ""));
                        }
                    }
                    break;
            }
        }

        /// <summary>
        /// Asynchronously saves the file to disk
        /// </summary>
        /// <param name="path"></param>
        /// <returns></returns>
        public Task SaveAsync(string path)
        {
            return Task.Run(() => {
                var bytes = GetBytes();
                using (FileStream SourceStream = File.Open(path, FileMode.Create))
                {
                    SourceStream.Seek(0, SeekOrigin.End);
                    SourceStream.Write(bytes, 0, bytes.Length);
                }
            });
        }

        /// <summary>
        /// Synchronously saves the file to disk.
        /// </summary>
        /// <param name="path"></param>
        public void Save(string path)
        {
            var bytes = GetBytes();
            File.WriteAllBytes(path, bytes);
        }

        /// <summary>
        /// Asynchronously gets the files bytes
        /// </summary>
        /// <returns></returns>
        public Task<byte[]> GetBytesAsync()
        {
            return Task.Run(() => {
                return GetBytes();
            });
        }

        /// <summary>
        /// Synchronously gets the files bytes.
        /// </summary>
        /// <returns></returns>
        public byte[] GetBytes()
        {
            // Initializes the document variables.
            InitializeDocumentVariables();

            byte[] bytes = null;
            using (var memoryStream = new MemoryStream())
            {
                // Create an entry
                using (var archive = new ZipArchive(memoryStream, ZipArchiveMode.Create, true))
                {
                    // Create Configurations2 folders
                    archive.CreateEntry("Configurations2/accelerator/");
                    archive.CreateEntry("Configurations2/floater/");
                    archive.CreateEntry("Configurations2/images/");
                    archive.CreateEntry("Configurations2/menubar/");
                    archive.CreateEntry("Configurations2/popupmenu/");
                    archive.CreateEntry("Configurations2/progressbar/");
                    archive.CreateEntry("Configurations2/statusbar/");
                    archive.CreateEntry("Configurations2/toolbar/");
                    archive.CreateEntry("Configurations2/toolpanel/");
                    archive.CreateEntry("Thumbnails/");

                    // Create settings.xml
                    AddEntry(archive, "settings.xml", settings());

                    // Create styles.xml
                    AddEntry(archive, "styles.xml", styles());

                    // Create mimetype
                    AddMimeType(archive, "application/vnd.oasis.opendocument.spreadsheet");

                    // Create meta.xml
                    AddEntry(archive, "meta.xml", meta());

                    // Create manifest.rdf
                    AddEntry(archive, "manifest.rdf", manifest_rdf());

                    // Create content.xml
                    AddEntry(archive, "content.xml", content());

                    // Create META-INF_manifest.xml
                    AddEntry(archive, "META-INF/manifest.xml", meta_inf_manifest());
                }

                bytes = memoryStream.ToArray();
            }

            return bytes;
        }

        /// <summary>
        /// Adds an entry to the zip archive
        /// </summary>
        /// <param name="archive">The archive</param>
        /// <param name="e">Entry path</param>
        /// <param name="x">Document to insert</param>
        private void AddEntry(ZipArchive archive, string e, XDocument doc)
        {
            var entry = archive.CreateEntry(e);
            using (var entryStream = entry.Open())
            {
                var s = new XmlWriterSettings();
                s.Encoding = new UTF8Encoding(false);
                using (XmlWriter writer = XmlWriter.Create(entryStream, s))
                    doc.WriteTo(writer);
            }
        }

        /// <summary>
        /// Adds a mime type to the zip archive
        /// </summary>
        /// <param name="archive">The archive</param>
        /// <param name="e">Entry</param>
        private void AddMimeType(ZipArchive archive, string e)
        {
            var entry = archive.CreateEntry("mimetype");
            using (var entryStream = entry.Open())
            {
                var utf8 = new UTF8Encoding(false);
                using (var writer = new StreamWriter(entryStream, utf8))
                {
                    writer.Write(e);
                }
            }
        }

        private int CellCount { get; set; } // Stores the cell count for use in the document
        /// <summary>
        /// Initializes document variables
        /// </summary>
        private void InitializeDocumentVariables()
        {

#if NET6_0_OR_GREATER
            // Iterate the worksheets
            var sheets = CollectionsMarshal.AsSpan(Worksheets);
            for (int i = 0; i < sheets.Length; i++)
            {
                for (int r = 0; r < sheets[i].Rows.Count; r++)
                {
                    for (int c = 0; c < sheets[i].Rows[r].Count; c++)
                    {
                        CellCount++;

                        // Add the errors
                        if (String.IsNullOrEmpty(sheets[i].Rows[r][c].Errors) == false)
                        {
                            // Add one to the index
                            string msg = $"Error on '{sheets[i].Name}' in cell {Utilities.GetIndex(c + 1)}{r + 1}: {sheets[i].Rows[r][c].Errors}";
                            Errors.Add(msg);
                        }
                    }
                }
            }
#elif NETSTANDARD2_0_OR_GREATER
            // Iterate the worksheets
            for (int i = 0; i < Worksheets.Count; i++)
            {
                for (int r = 0; r < Worksheets[i].Rows.Count; r++)
                {
                    for (int c = 0; c < Worksheets[i].Rows[r].Count; c++)
                    {
                        CellCount++;

                        // Add the errors
                        if (String.IsNullOrEmpty(Worksheets[i].Rows[r][c].Errors) == false)
                        {
                            // Add one to the index
                            string msg = $"Error on '{Worksheets[i].Name}' in cell {Utilities.GetIndex(c + 1)}{r + 1}: {Worksheets[i].Rows[r][c].Errors}";
                            Errors.Add(msg);
                        }
                    }
                }
            }
#endif

            if (AddErrors == true)
            {
                AddErrorsTab();
            }
        }
                
        private List<string> Errors { get; set; } // The list of errors 

        /// <summary>
        /// Returns the list of errors
        /// </summary>
        /// <returns></returns>
        public string GetErrors()
        {
            var sb = new StringBuilder();
            for (int i = 0; i < Errors.Count; i++)
            {
                sb.AppendLine(Errors[i]);
            }
            return sb.ToString();
        }

        private bool AddErrors { get; set; } = false;
        // Adds the errors worksheet
        public void AddErrorsWorksheet()
        {
            AddErrors = true;
        }

        /// <summary>
        /// Creates the errors worksheet
        /// </summary>
        private void AddErrorsTab()
        {
            if (Errors.Count > 0)
            {
                var e = new Worksheet("Errors");
                for (int i = 0; i < Errors.Count; i++)
                {
                    e.AddRow().AddCell(Errors[i], DataType.String);
                }
                e.TabColor = "#FF3838";
                Worksheets.Add(e);
            }
        }

        /// <summary>
        /// Creates the settings file for the worksheet
        /// </summary>
        /// <returns></returns>
        internal XDocument settings()
        {
            XNamespace office = "urn:oasis:names:tc:opendocument:xmlns:office:1.0";
            XNamespace ooo = "http://openoffice.org/2004/office";
            XNamespace xlink = "http://www.w3.org/1999/xlink";
            XNamespace config = "urn:oasis:names:tc:opendocument:xmlns:config:1.0";

            // Add the tables from the worksheets
            var config_item_map_named = new XElement(config + "config-item-map-named", new XAttribute(config + "name", "Tables"));
            var config_item_map_named2 = new XElement(config + "config-item-map-named", new XAttribute(config + "name", "ScriptConfiguration"));

            int i = 1;
            string ActiveTable = String.Empty;
            for (int n = 0; n < Worksheets.Count; n++)
            {
                if (i == 1)
                {
                    ActiveTable = Worksheets[n].Name;
                }
                config_item_map_named.Add(Worksheets[n].Get_config_item_map_entry());

                config_item_map_named2.Add(new XElement(config + "config-item-map-entry", new XAttribute(config + "name", Worksheets[n].Name),
                    new XElement(config + "config-item", new XAttribute(config + "name", "CodeName"), new XAttribute(config + "type", "string"), $"Sheet{i}")));

                i++;
            }           

            var settings = new XElement(office + "document-settings",
                    new XAttribute(XNamespace.Xmlns + "office", office),
                    new XAttribute(XNamespace.Xmlns + "ooo", ooo),
                    new XAttribute(XNamespace.Xmlns + "xlink", xlink),
                    new XAttribute(XNamespace.Xmlns + "config", config),
                    new XAttribute(office + "version", "1.3"),
                    new XElement(office + "settings",
                        new XElement(config + "config-item-set", new XAttribute(config + "name", "ooo:view-settings"),
                            new XElement(config + "config-item", new XAttribute(config + "name", "VisibleAreaTop"), new XAttribute(config + "type", "int"), 0),
                            new XElement(config + "config-item", new XAttribute(config + "name", "VisibleAreaLeft"), new XAttribute(config + "type", "int"), 0),
                            new XElement(config + "config-item", new XAttribute(config + "name", "VisibleAreaWidth"), new XAttribute(config + "type", "int"), 2257),
                            new XElement(config + "config-item", new XAttribute(config + "name", "VisibleAreaHeight"), new XAttribute(config + "type", "int"), 451),
                            new XElement(config + "config-item-map-indexed", new XAttribute(config + "name", "Views"),
                                new XElement(config + "config-item-map-entry",
                                    new XElement(config + "config-item", new XAttribute(config + "name", "ViewId"), new XAttribute(config + "type", "string"), "view1"),
                                    config_item_map_named,
                                    new XElement(config + "config-item", new XAttribute(config + "name", "ActiveTable"), new XAttribute(config + "type", "string"), ActiveTable),
                                    new XElement(config + "config-item", new XAttribute(config + "name", "HorizontalScrollbarWidth"), new XAttribute(config + "type", "int"), 1359),
                                    new XElement(config + "config-item", new XAttribute(config + "name", "ZoomType"), new XAttribute(config + "type", "short"), 0),
                                    new XElement(config + "config-item", new XAttribute(config + "name", "ZoomValue"), new XAttribute(config + "type", "int"), 100),
                                    new XElement(config + "config-item", new XAttribute(config + "name", "PageViewZoomValue"), new XAttribute(config + "type", "int"), 60),
                                    new XElement(config + "config-item", new XAttribute(config + "name", "ShowPageBreakPreview"), new XAttribute(config + "type", "boolean"), false),
                                    new XElement(config + "config-item", new XAttribute(config + "name", "ShowZeroValues"), new XAttribute(config + "type", "boolean"), true),
                                    new XElement(config + "config-item", new XAttribute(config + "name", "ShowNotes"), new XAttribute(config + "type", "boolean"), true),
                                    new XElement(config + "config-item", new XAttribute(config + "name", "ShowGrid"), new XAttribute(config + "type", "boolean"), true),
                                    new XElement(config + "config-item", new XAttribute(config + "name", "GridColor"), new XAttribute(config + "type", "int"), 12632256),
                                    new XElement(config + "config-item", new XAttribute(config + "name", "ShowPageBreaks"), new XAttribute(config + "type", "boolean"), true),
                                    new XElement(config + "config-item", new XAttribute(config + "name", "HasColumnRowHeaders"), new XAttribute(config + "type", "boolean"), true),
                                    new XElement(config + "config-item", new XAttribute(config + "name", "HasSheetTabs"), new XAttribute(config + "type", "boolean"), true),
                                    new XElement(config + "config-item", new XAttribute(config + "name", "IsOutlineSymbolsSet"), new XAttribute(config + "type", "boolean"), true),
                                    new XElement(config + "config-item", new XAttribute(config + "name", "IsValueHighlightingEnabled"), new XAttribute(config + "type", "boolean"), false),
                                    new XElement(config + "config-item", new XAttribute(config + "name", "IsSnapToRaster"), new XAttribute(config + "type", "boolean"), false),
                                    new XElement(config + "config-item", new XAttribute(config + "name", "RasterIsVisible"), new XAttribute(config + "type", "boolean"), false),
                                    new XElement(config + "config-item", new XAttribute(config + "name", "RasterResolutionX"), new XAttribute(config + "type", "int"), 1270),
                                    new XElement(config + "config-item", new XAttribute(config + "name", "RasterResolutionY"), new XAttribute(config + "type", "int"), 1270),
                                    new XElement(config + "config-item", new XAttribute(config + "name", "RasterSubdivisionX"), new XAttribute(config + "type", "int"), 1),
                                    new XElement(config + "config-item", new XAttribute(config + "name", "RasterSubdivisionY"), new XAttribute(config + "type", "int"), 1),
                                    new XElement(config + "config-item", new XAttribute(config + "name", "IsRasterAxisSynchronized"), new XAttribute(config + "type", "boolean"), true),
                                    new XElement(config + "config-item", new XAttribute(config + "name", "AnchoredTextOverflowLegacy"), new XAttribute(config + "type", "boolean"), false)))),
                        new XElement(config + "config-item-set", new XAttribute(config + "name", "ooo:configuration-settings"),
                            new XElement(config + "config-item", new XAttribute(config + "name", "HasSheetTabs"), new XAttribute(config + "type", "boolean"), true),
                            new XElement(config + "config-item", new XAttribute(config + "name", "ShowNotes"), new XAttribute(config + "type", "boolean"), true),
                            new XElement(config + "config-item", new XAttribute(config + "name", "EmbedComplexScriptFonts"), new XAttribute(config + "type", "boolean"), true),
                            new XElement(config + "config-item", new XAttribute(config + "name", "ShowZeroValues"), new XAttribute(config + "type", "boolean"), true),
                            new XElement(config + "config-item", new XAttribute(config + "name", "ShowGrid"), new XAttribute(config + "type", "boolean"), true),
                            new XElement(config + "config-item", new XAttribute(config + "name", "GridColor"), new XAttribute(config + "type", "int"), 12632256),
                            new XElement(config + "config-item", new XAttribute(config + "name", "ShowPageBreaks"), new XAttribute(config + "type", "boolean"), true),
                            new XElement(config + "config-item", new XAttribute(config + "name", "IsKernAsianPunctuation"), new XAttribute(config + "type", "boolean"), false),
                            new XElement(config + "config-item", new XAttribute(config + "name", "LinkUpdateMode"), new XAttribute(config + "type", "short"), 3),
                            new XElement(config + "config-item", new XAttribute(config + "name", "HasColumnRowHeaders"), new XAttribute(config + "type", "boolean"), true),
                            new XElement(config + "config-item", new XAttribute(config + "name", "EmbedLatinScriptFonts"), new XAttribute(config + "type", "boolean"), true),
                            new XElement(config + "config-item", new XAttribute(config + "name", "IsOutlineSymbolsSet"), new XAttribute(config + "type", "boolean"), true),
                            new XElement(config + "config-item", new XAttribute(config + "name", "IsSnapToRaster"), new XAttribute(config + "type", "boolean"), false),
                            new XElement(config + "config-item", new XAttribute(config + "name", "RasterIsVisible"), new XAttribute(config + "type", "boolean"), false),
                            new XElement(config + "config-item", new XAttribute(config + "name", "RasterResolutionX"), new XAttribute(config + "type", "int"), 1270),
                            new XElement(config + "config-item", new XAttribute(config + "name", "RasterResolutionY"), new XAttribute(config + "type", "int"), 1270),
                            new XElement(config + "config-item", new XAttribute(config + "name", "RasterSubdivisionX"), new XAttribute(config + "type", "int"), 1),
                            new XElement(config + "config-item", new XAttribute(config + "name", "RasterSubdivisionY"), new XAttribute(config + "type", "int"), 1),
                            new XElement(config + "config-item", new XAttribute(config + "name", "IsRasterAxisSynchronized"), new XAttribute(config + "type", "boolean"), true),
                            new XElement(config + "config-item", new XAttribute(config + "name", "AutoCalculate"), new XAttribute(config + "type", "boolean"), true),
                            new XElement(config + "config-item", new XAttribute(config + "name", "ApplyUserData"), new XAttribute(config + "type", "boolean"), true),
                            new XElement(config + "config-item", new XAttribute(config + "name", "PrinterName"), new XAttribute(config + "type", "string")),
                            new XElement(config + "config-item", new XAttribute(config + "name", "PrinterSetup"), new XAttribute(config + "type", "base64Binary")),
                            new XElement(config + "config-item", new XAttribute(config + "name", "PrinterPaperFromSetup"), new XAttribute(config + "type", "boolean"), false),
                            new XElement(config + "config-item", new XAttribute(config + "name", "SaveThumbnail"), new XAttribute(config + "type", "boolean"), true),
                            new XElement(config + "config-item", new XAttribute(config + "name", "CharacterCompressionType"), new XAttribute(config + "type", "short"), 0),
                            new XElement(config + "config-item", new XAttribute(config + "name", "SaveVersionOnClose"), new XAttribute(config + "type", "boolean"), false),
                            new XElement(config + "config-item", new XAttribute(config + "name", "UpdateFromTemplate"), new XAttribute(config + "type", "boolean"), true),
                            new XElement(config + "config-item", new XAttribute(config + "name", "AllowPrintJobCancel"), new XAttribute(config + "type", "boolean"), true),
                            new XElement(config + "config-item", new XAttribute(config + "name", "LoadReadonly"), new XAttribute(config + "type", "boolean"), false),
                            new XElement(config + "config-item", new XAttribute(config + "name", "IsDocumentShared"), new XAttribute(config + "type", "boolean"), false),
                            new XElement(config + "config-item", new XAttribute(config + "name", "EmbedFonts"), new XAttribute(config + "type", "boolean"), false),
                            new XElement(config + "config-item", new XAttribute(config + "name", "EmbedOnlyUsedFonts"), new XAttribute(config + "type", "boolean"), false),
                            new XElement(config + "config-item", new XAttribute(config + "name", "EmbedAsianScriptFonts"), new XAttribute(config + "type", "boolean"), true),
                            new XElement(config + "config-item", new XAttribute(config + "name", "SyntaxStringRef"), new XAttribute(config + "type", "short"), 7),
                            config_item_map_named2)));

            return new XDocument(new XDeclaration("1.0", "UTF-8", null), settings);
        }

        /// <summary>
        /// Creates the styles file
        /// </summary>
        /// <returns></returns>
        internal XDocument styles()
        {
            XNamespace meta = "urn:oasis:names:tc:opendocument:xmlns:meta:1.0";
            XNamespace office = "urn:oasis:names:tc:opendocument:xmlns:office:1.0";
            XNamespace fo = "urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0";
            XNamespace ooo = "http://openoffice.org/2004/office";
            XNamespace xlink = "http://www.w3.org/1999/xlink";
            XNamespace dc = "http://purl.org/dc/elements/1.1/";
            XNamespace style = "urn:oasis:names:tc:opendocument:xmlns:style:1.0";
            XNamespace text = "urn:oasis:names:tc:opendocument:xmlns:text:1.0";
            XNamespace draw = "urn:oasis:names:tc:opendocument:xmlns:drawing:1.0";
            XNamespace dr3d = "urn:oasis:names:tc:opendocument:xmlns:dr3d:1.0";
            XNamespace svg = "urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0";
            XNamespace chart = "urn:oasis:names:tc:opendocument:xmlns:chart:1.0";
            XNamespace rpt = "http://openoffice.org/2005/report";
            XNamespace table = "urn:oasis:names:tc:opendocument:xmlns:table:1.0";
            XNamespace number = "urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0";
            XNamespace ooow = "http://openoffice.org/2004/writer";
            XNamespace oooc = "http://openoffice.org/2004/calc";
            XNamespace of = "urn:oasis:names:tc:opendocument:xmlns:of:1.2";
            XNamespace tableooo = "http://openoffice.org/2009/table";
            XNamespace calcext = "urn:org:documentfoundation:names:experimental:calc:xmlns:calcext:1.0";
            XNamespace drawooo = "http://openoffice.org/2010/draw";
            XNamespace loext = "urn:org:documentfoundation:names:experimental:office:xmlns:loext:1.0";
            XNamespace field = "urn:openoffice:names:experimental:ooo-ms-interop:xmlns:field:1.0";
            XNamespace math = "http://www.w3.org/1998/Math/MathML";
            XNamespace form = "urn:oasis:names:tc:opendocument:xmlns:form:1.0";
            XNamespace script = "urn:oasis:names:tc:opendocument:xmlns:script:1.0";
            XNamespace dom = "http://www.w3.org/2001/xml-events";
            XNamespace xhtml = "http://www.w3.org/1999/xhtml";
            XNamespace grddl = "http://www.w3.org/2003/g/data-view#";
            XNamespace css3t = "http://www.w3.org/TR/css3-text/";
            XNamespace presentation = "urn:oasis:names:tc:opendocument:xmlns:presentation:1.0";

            var styles = new XElement(office + "document-styles",
                    new XAttribute(XNamespace.Xmlns + "meta", meta),
                    new XAttribute(XNamespace.Xmlns + "office", office),
                    new XAttribute(XNamespace.Xmlns + "fo", fo),
                    new XAttribute(XNamespace.Xmlns + "ooo", ooo),
                    new XAttribute(XNamespace.Xmlns + "xlink", xlink),
                    new XAttribute(XNamespace.Xmlns + "dc", dc),
                    new XAttribute(XNamespace.Xmlns + "style", style),
                    new XAttribute(XNamespace.Xmlns + "text", text),
                    new XAttribute(XNamespace.Xmlns + "draw", draw),
                    new XAttribute(XNamespace.Xmlns + "dr3d", dr3d),
                    new XAttribute(XNamespace.Xmlns + "svg", svg),
                    new XAttribute(XNamespace.Xmlns + "chart", chart),
                    new XAttribute(XNamespace.Xmlns + "rpt", rpt),
                    new XAttribute(XNamespace.Xmlns + "table", table),
                    new XAttribute(XNamespace.Xmlns + "number", number),
                    new XAttribute(XNamespace.Xmlns + "ooow", ooow),
                    new XAttribute(XNamespace.Xmlns + "oooc", oooc),
                    new XAttribute(XNamespace.Xmlns + "of", of),
                    new XAttribute(XNamespace.Xmlns + "tableooo", tableooo),
                    new XAttribute(XNamespace.Xmlns + "calcext", calcext),
                    new XAttribute(XNamespace.Xmlns + "drawooo", drawooo),
                    new XAttribute(XNamespace.Xmlns + "loext", loext),
                    new XAttribute(XNamespace.Xmlns + "field", field),
                    new XAttribute(XNamespace.Xmlns + "math", math),
                    new XAttribute(XNamespace.Xmlns + "form", form),
                    new XAttribute(XNamespace.Xmlns + "script", script),
                    new XAttribute(XNamespace.Xmlns + "dom", dom),
                    new XAttribute(XNamespace.Xmlns + "xhtml", xhtml),
                    new XAttribute(XNamespace.Xmlns + "grddl", grddl),
                    new XAttribute(XNamespace.Xmlns + "css3t", css3t),
                    new XAttribute(XNamespace.Xmlns + "presentation", presentation),
                    new XAttribute(office + "version", "1.3"),
                    new XElement(office + "font-face-decls",
                        new XElement(style + "font-face", new XAttribute(style + "name", "Liberation Sans"), new XAttribute(svg + "font-family", "'Liberation Sans'"), new XAttribute(style + "font-family-generic", "swiss"), new XAttribute(style + "font-pitch", "variable")),
                        new XElement(style + "font-face", new XAttribute(style + "name", "Lucida Sans"), new XAttribute(svg + "font-family", "'Lucida Sans'"), new XAttribute(style + "font-family-generic", "system"), new XAttribute(style + "font-pitch", "variable")),
                        new XElement(style + "font-face", new XAttribute(style + "name", "Microsoft YaHei"), new XAttribute(svg + "font-family", "'Microsoft YaHei'"), new XAttribute(style + "font-family-generic", "system"), new XAttribute(style + "font-pitch", "variable"))),
                    new XElement(office + "styles",
                        new XElement(style + "default-style", new XAttribute(style + "family", "table-cell"),
                            new XElement(style + "paragraph-properties", new XAttribute(style + "tab-stop-distance", "0.5in")),
                            new XElement(style + "text-properties",
                                new XAttribute(style + "font-name", "Liberation Sans"),
                                new XAttribute(fo + "language", "en"),
                                new XAttribute(fo + "country", "US"),
                                new XAttribute(style + "font-name-asian", "Microsoft YaHei"),
                                new XAttribute(style + "language-asian", "zh"),
                                new XAttribute(style + "country-asian", "CN"),
                                new XAttribute(style + "font-name-complex", "Lucida Sans"),
                                new XAttribute(style + "language-complex", "hi"),
                                new XAttribute(style + "country-complex", "IN"))),
                        new XElement(number + "number-style", new XAttribute(style + "name", "N0"),
                            new XElement(number + "number", new XAttribute(number + "min-integer-digits", "1"))),
                        new XElement(number + "number-style", new XAttribute(style + "name", "N121"),
                            new XElement(number + "number", new XAttribute(number + "decimal-places", NumberDecimals), new XAttribute(number + "min-decimal-places", NumberDecimals), new XAttribute(number + "min-integer-digits", "1"), new XAttribute(number + "grouping", "true"))),
                        new XElement(style + "style", new XAttribute(style + "name", "Default"), new XAttribute(style + "family", "table-cell")),
                        new XElement(style + "style", new XAttribute(style + "name", "Heading"), new XAttribute(style + "family", "table-cell"), new XAttribute(style + "parent-style-name", "Default"),
                            new XElement(style + "text-properties",
                                new XAttribute(fo + "color", "#000000"),
                                new XAttribute(fo + "font-size", "24pt"),
                                new XAttribute(fo + "font-style", "normal"),
                                new XAttribute(fo + "font-weight", "bold"))),
                        new XElement(style + "style", new XAttribute(style + "name", "Heading_20_1"), new XAttribute(style + "display-name", "Heading 1"), new XAttribute(style + "family", "table-cell"), new XAttribute(style + "parent-style-name", "Heading"),
                            new XElement(style + "text-properties",
                                new XAttribute(fo + "color", "#000000"),
                                new XAttribute(fo + "font-size", "18pt"),
                                new XAttribute(fo + "font-style", "normal"),
                                new XAttribute(fo + "font-weight", "normal"))),
                        new XElement(style + "style", new XAttribute(style + "name", "Heading_20_2"), new XAttribute(style + "display-name", "Heading 2"), new XAttribute(style + "family", "table-cell"), new XAttribute(style + "parent-style-name", "Heading"),
                            new XElement(style + "text-properties",
                                new XAttribute(fo + "color", "#000000"),
                                new XAttribute(fo + "font-size", "12pt"),
                                new XAttribute(fo + "font-style", "normal"),
                                new XAttribute(fo + "font-weight", "normal"))),
                        new XElement(style + "style", new XAttribute(style + "name", "Text"), new XAttribute(style + "family", "table-cell"), new XAttribute(style + "parent-style-name", "Default")),
                        new XElement(style + "style", new XAttribute(style + "name", "Note"), new XAttribute(style + "family", "table-cell"), new XAttribute(style + "parent-style-name", "Text"),
                            new XElement(style + "table-cell-properties",
                                new XAttribute(fo + "background-color", "#ffffcc"),
                                new XAttribute(style + "diagonal-bl-tr", "none"),
                                new XAttribute(style + "diagonal-tl-br", "none"),
                                new XAttribute(fo + "border", "0.74pt solid #808080")),
                            new XElement(style + "text-properties",
                                new XAttribute(fo + "color", "#333333"),
                                new XAttribute(fo + "font-size", "10pt"),
                                new XAttribute(fo + "font-style", "normal"),
                                new XAttribute(fo + "font-weight", "normal"))),
                        new XElement(style + "style", new XAttribute(style + "name", "Footnote"), new XAttribute(style + "family", "table-cell"), new XAttribute(style + "parent-style-name", "Text"),
                            new XElement(style + "text-properties",
                                new XAttribute(fo + "color", "#808080"),
                                new XAttribute(fo + "font-size", "10pt"),
                                new XAttribute(fo + "font-style", "italic"),
                                new XAttribute(fo + "font-weight", "normal"))),
                        new XElement(style + "style", new XAttribute(style + "name", "Hyperlink"), new XAttribute(style + "family", "table-cell"), new XAttribute(style + "parent-style-name", "Text"),
                            new XElement(style + "text-properties",
                                new XAttribute(fo + "color", "#0000ee"),
                                new XAttribute(fo + "font-size", "10pt"),
                                new XAttribute(fo + "font-style", "normal"),
                                new XAttribute(style + "text-underline-style", "solid"),
                                new XAttribute(style + "text-underline-width", "auto"),
                                new XAttribute(style + "text-underline-color", "#0000ee"),
                                new XAttribute(fo + "font-weight", "normal"))),
                        new XElement(style + "style", new XAttribute(style + "name", "Status"), new XAttribute(style + "family", "table-cell"), new XAttribute(style + "parent-style-name", "Default")),
                        new XElement(style + "style", new XAttribute(style + "name", "Good"), new XAttribute(style + "family", "table-cell"), new XAttribute(style + "parent-style-name", "Status"),
                            new XElement(style + "table-cell-properties",
                                new XAttribute(fo + "background-color", "#ccffcc")),
                            new XElement(style + "text-properties",
                                new XAttribute(fo + "color", "#006600"),
                                new XAttribute(fo + "font-size", "10pt"),
                                new XAttribute(fo + "font-style", "normal"),
                                new XAttribute(fo + "font-weight", "normal"))),
                        new XElement(style + "style", new XAttribute(style + "name", "Neutral"), new XAttribute(style + "family", "table-cell"), new XAttribute(style + "parent-style-name", "Status"),
                            new XElement(style + "table-cell-properties",
                                new XAttribute(fo + "background-color", "#ffffcc")),
                            new XElement(style + "text-properties",
                                new XAttribute(fo + "color", "#996600"),
                                new XAttribute(fo + "font-size", "10pt"),
                                new XAttribute(fo + "font-style", "normal"),
                                new XAttribute(fo + "font-weight", "normal"))),
                         new XElement(style + "style", new XAttribute(style + "name", "Bad"), new XAttribute(style + "family", "table-cell"), new XAttribute(style + "parent-style-name", "Status"),
                            new XElement(style + "table-cell-properties",
                                new XAttribute(fo + "background-color", "#ffcccc")),
                            new XElement(style + "text-properties",
                                new XAttribute(fo + "color", "#cc0000"),
                                new XAttribute(fo + "font-size", "10pt"),
                                new XAttribute(fo + "font-style", "normal"),
                                new XAttribute(fo + "font-weight", "normal"))),
                         new XElement(style + "style", new XAttribute(style + "name", "Warning"), new XAttribute(style + "family", "table-cell"), new XAttribute(style + "parent-style-name", "Status"),
                            new XElement(style + "text-properties",
                                new XAttribute(fo + "color", "#cc0000"),
                                new XAttribute(fo + "font-size", "10pt"),
                                new XAttribute(fo + "font-style", "normal"),
                                new XAttribute(fo + "font-weight", "normal"))),
                         new XElement(style + "style", new XAttribute(style + "name", "Error"), new XAttribute(style + "family", "table-cell"), new XAttribute(style + "parent-style-name", "Status"),
                            new XElement(style + "table-cell-properties",
                                new XAttribute(fo + "background-color", "#cc0000")),
                            new XElement(style + "text-properties",
                                new XAttribute(fo + "color", "#ffffff"),
                                new XAttribute(fo + "font-size", "10pt"),
                                new XAttribute(fo + "font-style", "normal"),
                                new XAttribute(fo + "font-weight", "bold"))),
                         new XElement(style + "style", new XAttribute(style + "name", "Accent"), new XAttribute(style + "family", "table-cell"), new XAttribute(style + "parent-style-name", "Default"),
                            new XElement(style + "text-properties",
                                new XAttribute(fo + "color", "#000000"),
                                new XAttribute(fo + "font-size", "10pt"),
                                new XAttribute(fo + "font-style", "normal"),
                                new XAttribute(fo + "font-weight", "bold"))),
                         new XElement(style + "style", new XAttribute(style + "name", "Accent_20_1"), new XAttribute(style + "display-name", "Accent 1"), new XAttribute(style + "family", "table-cell"), new XAttribute(style + "parent-style-name", "Accent"),
                            new XElement(style + "table-cell-properties",
                                new XAttribute(fo + "background-color", "#000000")),
                            new XElement(style + "text-properties",
                                new XAttribute(fo + "color", "#ffffff"),
                                new XAttribute(fo + "font-size", "10pt"),
                                new XAttribute(fo + "font-style", "normal"),
                                new XAttribute(fo + "font-weight", "normal"))),
                         new XElement(style + "style", new XAttribute(style + "name", "Accent_20_2"), new XAttribute(style + "display-name", "Accent 2"), new XAttribute(style + "family", "table-cell"), new XAttribute(style + "parent-style-name", "Accent"),
                            new XElement(style + "table-cell-properties",
                                new XAttribute(fo + "background-color", "#808080")),
                            new XElement(style + "text-properties",
                                new XAttribute(fo + "color", "#ffffff"),
                                new XAttribute(fo + "font-size", "10pt"),
                                new XAttribute(fo + "font-style", "normal"),
                                new XAttribute(fo + "font-weight", "normal"))),
                          new XElement(style + "style", new XAttribute(style + "name", "Accent_20_3"), new XAttribute(style + "display-name", "Accent 3"), new XAttribute(style + "family", "table-cell"), new XAttribute(style + "parent-style-name", "Accent"),
                            new XElement(style + "table-cell-properties",
                                new XAttribute(fo + "background-color", "#dddddd"))),
                          new XElement(style + "style", new XAttribute(style + "name", "Result"), new XAttribute(style + "family", "table-cell"), new XAttribute(style + "parent-style-name", "Default"),
                            new XElement(style + "text-properties",
                                new XAttribute(fo + "color", "#000000"),
                                new XAttribute(fo + "font-size", "10pt"),
                                new XAttribute(fo + "font-style", "italic"),
                                new XAttribute(style + "text-underline-style", "solid"),
                                new XAttribute(style + "text-underline-width", "auto"),
                                new XAttribute(style + "text-underline-color", "#000000"),
                                new XAttribute(fo + "font-weight", "bold")))),
                    new XElement(office + "automatic-styles",
                        new XElement(number + "number-style", new XAttribute(style + "name", "N2"),
                            new XElement(number + "number", new XAttribute(number + "decimal-places", "2"), new XAttribute(number + "min-decimal-places", "2"), new XAttribute(number + "min-integer-digits", "1"))),
                        new XElement(style + "page-layout", new XAttribute(style + "name", "Mpm1"),
                            new XElement(style + "page-layout-properties", new XAttribute(style + "writing-mode", "lr-tb")),
                            new XElement(style + "header-style",
                                new XElement(style + "header-footer-properties",
                                    new XAttribute(fo + "min-height", "0.2953in"),
                                    new XAttribute(fo + "margin-left", "0in"),
                                    new XAttribute(fo + "margin-right", "0in"),
                                    new XAttribute(fo + "margin-bottom", "0.0984in"))),
                            new XElement(style + "footer-style",
                                new XElement(style + "header-footer-properties",
                                    new XAttribute(fo + "min-height", "0.2953in"),
                                    new XAttribute(fo + "margin-left", "0in"),
                                    new XAttribute(fo + "margin-right", "0in"),
                                    new XAttribute(fo + "margin-top", "0.0984in")))),
                        new XElement(style + "page-layout", new XAttribute(style + "name", "Mpm2"),
                            new XElement(style + "page-layout-properties", new XAttribute(style + "writing-mode", "lr-tb")),
                            new XElement(style + "header-style",
                                new XElement(style + "header-footer-properties",
                                    new XAttribute(fo + "min-height", "0.2953in"),
                                    new XAttribute(fo + "margin-left", "0in"),
                                    new XAttribute(fo + "margin-right", "0in"),
                                    new XAttribute(fo + "margin-bottom", "0.0984in"),
                                    new XAttribute(fo + "border", "2.49pt solid #000000"),
                                    new XAttribute(fo + "padding", "0.0071in"),
                                    new XAttribute(fo + "background-color", "#c0c0c0"),
                                    new XElement(style + "background-image"))),
                            new XElement(style + "footer-style",
                                new XElement(style + "header-footer-properties",
                                    new XAttribute(fo + "min-height", "0.2953in"),
                                    new XAttribute(fo + "margin-left", "0in"),
                                    new XAttribute(fo + "margin-right", "0in"),
                                    new XAttribute(fo + "margin-top", "0.0984in"),
                                    new XAttribute(fo + "border", "2.49pt solid #000000"),
                                    new XAttribute(fo + "padding", "0.0071in"),
                                    new XAttribute(fo + "background-color", "#c0c0c0"),
                                    new XElement(style + "background-image"))))),
                     new XElement(office + "master-styles",
                        new XElement(style + "master-page", new XAttribute(style + "name", "Default"), new XAttribute(style + "page-layout-name", "Mpm1"),
                            new XElement(style + "header",
                                new XElement(text + "p",
                                    new XElement(text + "sheet-name", "???"))),
                            new XElement(style + "header-left", new XAttribute(style + "display", "false")),
                            new XElement(style + "footer",
                                new XElement(text + "p", "Page",
                                    new XElement(text + "page-number", "1"))),
                            new XElement(style + "footer-left", new XAttribute(style + "display", "false"))),
                        new XElement(style + "master-page", new XAttribute(style + "name", "Report"), new XAttribute(style + "page-layout-name", "Mpm2"),
                            new XElement(style + "header",
                                new XElement(style + "region-left",
                                    new XElement(text + "p",
                                        new XElement(text + "sheet-name", "???"),
                                        new XElement(text + "s"), "(",
                                        new XElement(text + "title", "???"), ")")),
                                new XElement(style + "region-right",
                                    new XElement(text + "p",
                                        new XElement(text + "date", new XAttribute(style + "data-style-name", "N2"), new XAttribute(text + "date-value", DateTime.Now.ToString("yyyy-MM-dd")), "00/00/0000"),
                                        new XElement(text + "time", "00:00:00")))),
                            new XElement(style + "header-left", new XAttribute(style + "display", "false")),
                            new XElement(style + "footer",
                                new XElement(text + "p", "Page",
                                    new XElement(text + "page-number", 1),
                                    new XElement(text + "s"), "/",
                                    new XElement(text + "page-count", 99))),
                            new XElement(style + "footer-left", new XAttribute(style + "display", "false")))));

            return new XDocument(new XDeclaration("1.0", "UTF-8", null), styles);
        }

        /// <summary>
        /// Create the meta file that stores the meta data.
        /// </summary>
        /// <returns></returns>
        internal XDocument meta()
        {
            XNamespace grddl = "http://www.w3.org/2003/g/data-view#";
            XNamespace meta = "urn:oasis:names:tc:opendocument:xmlns:meta:1.0";
            XNamespace office = "urn:oasis:names:tc:opendocument:xmlns:office:1.0";
            XNamespace ooo = "http://openoffice.org/2004/office";
            XNamespace xlink = "http://www.w3.org/1999/xlink";
            XNamespace dc = "http://purl.org/dc/elements/1.1/";

            var create_date = Utilities.OdsTimestamp();

            var _meta = new XElement(office + "document-meta",
                new XAttribute(XNamespace.Xmlns + "grddl", grddl),
                new XAttribute(XNamespace.Xmlns + "meta", meta),
                new XAttribute(XNamespace.Xmlns + "office", office),
                new XAttribute(XNamespace.Xmlns + "ooo", ooo),
                new XAttribute(XNamespace.Xmlns + "xlink", xlink),
                new XAttribute(XNamespace.Xmlns + "dc", dc),
                new XAttribute(office + "version", "1.3"),
                new XElement(office + "meta",
                    new XElement(meta + "generator", "AutoGenerated"),
                    new XElement(meta + "initial-creator", CreatedBy),
                    new XElement(dc + "creator", CreatedBy),
                    new XElement(meta + "creation-date", create_date),
                    new XElement(meta + "document-statistic", new XAttribute(meta + "table-count", $"{Worksheets.Count}"), new XAttribute(meta + "cell-count", $"{CellCount}"), new XAttribute(meta + "object-count", "0")),
                    new XElement(dc + "date", create_date)));

            return new XDocument(new XDeclaration("1.0", "UTF-8", null), _meta);
        }

        /// <summary>
        /// Contains a manifest of the files contents
        /// </summary>
        /// <returns></returns>
        internal XDocument manifest_rdf()
        {
            XNamespace rdf = "http://www.w3.org/1999/02/22-rdf-syntax-ns#";
            XNamespace ns0 = "http://docs.oasis-open.org/ns/office/1.2/meta/pkg#";

            var _manifest_rdf = new XElement(rdf + "RDF",
                new XAttribute(XNamespace.Xmlns + "rdf", rdf),
                new XElement(rdf + "Description", new XAttribute(rdf + "about", "styles.xml"),
                    new XElement(rdf + "type", new XAttribute(rdf + "resource", "http://docs.oasis-open.org/ns/office/1.2/meta/odf#StylesFile"))),
                new XElement(rdf + "Description", new XAttribute(rdf + "about", ""),
                    new XElement(ns0 + "hasPart", new XAttribute(XNamespace.Xmlns + "ns0", "http://docs.oasis-open.org/ns/office/1.2/meta/pkg#"), new XAttribute(rdf + "resource", "styles.xml"))),
                new XElement(rdf + "Description", new XAttribute(rdf + "about", "content.xml"),
                    new XElement(rdf + "type", new XAttribute(rdf + "resource", "http://docs.oasis-open.org/ns/office/1.2/meta/odf#ContentFile"))),
                new XElement(rdf + "Description", new XAttribute(rdf + "about", ""),
                    new XElement(ns0 + "hasPart", new XAttribute(XNamespace.Xmlns + "ns0", "http://docs.oasis-open.org/ns/office/1.2/meta/pkg#"), new XAttribute(rdf + "resource", "content.xml"))),
                new XElement(rdf + "Description", new XAttribute(rdf + "about", ""),
                    new XElement(rdf + "type", new XAttribute(rdf + "resource", "http://docs.oasis-open.org/ns/office/1.2/meta/pkg#Document"))));

            return new XDocument(new XDeclaration("1.0", "UTF-8", null), _manifest_rdf);
        }

        /// <summary>
        /// The document's content
        /// </summary>
        /// <returns></returns>
        internal XDocument content()
        {
            XNamespace meta = "urn:oasis:names:tc:opendocument:xmlns:meta:1.0";
            XNamespace office = "urn:oasis:names:tc:opendocument:xmlns:office:1.0";
            XNamespace fo = "urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0";
            XNamespace ooo = "http://openoffice.org/2004/office";
            XNamespace xlink = "http://www.w3.org/1999/xlink";
            XNamespace dc = "http://purl.org/dc/elements/1.1/";
            XNamespace style = "urn:oasis:names:tc:opendocument:xmlns:style:1.0";
            XNamespace text = "urn:oasis:names:tc:opendocument:xmlns:text:1.0";
            XNamespace draw = "urn:oasis:names:tc:opendocument:xmlns:drawing:1.0";
            XNamespace dr3d = "urn:oasis:names:tc:opendocument:xmlns:dr3d:1.0";
            XNamespace svg = "urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0";
            XNamespace chart = "urn:oasis:names:tc:opendocument:xmlns:chart:1.0";
            XNamespace rpt = "http://openoffice.org/2005/report";
            XNamespace table = "urn:oasis:names:tc:opendocument:xmlns:table:1.0";
            XNamespace number = "urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0";
            XNamespace ooow = "http://openoffice.org/2004/writer";
            XNamespace oooc = "http://openoffice.org/2004/calc";
            XNamespace of = "urn:oasis:names:tc:opendocument:xmlns:of:1.2";
            XNamespace tableooo = "http://openoffice.org/2009/table";
            XNamespace calcext = "urn:org:documentfoundation:names:experimental:calc:xmlns:calcext:1.0";
            XNamespace drawooo = "http://openoffice.org/2010/draw";
            XNamespace loext = "urn:org:documentfoundation:names:experimental:office:xmlns:loext:1.0";
            XNamespace field = "urn:openoffice:names:experimental:ooo-ms-interop:xmlns:field:1.0";
            XNamespace math = "http://www.w3.org/1998/Math/MathML";
            XNamespace form = "urn:oasis:names:tc:opendocument:xmlns:form:1.0";
            XNamespace script = "urn:oasis:names:tc:opendocument:xmlns:script:1.0";
            XNamespace dom = "http://www.w3.org/2001/xml-events";
            XNamespace xforms = "http://www.w3.org/2002/xforms";
            XNamespace xsd = "http://www.w3.org/2001/XMLSchema";
            XNamespace xsi = "http://www.w3.org/2001/XMLSchema-instance";
            XNamespace formx = "urn:openoffice:names:experimental:ooxml-odf-interop:xmlns:form:1.0";
            XNamespace xhtml = "http://www.w3.org/1999/xhtml";
            XNamespace grddl = "http://www.w3.org/2003/g/data-view#";
            XNamespace css3t = "http://www.w3.org/TR/css3-text/";
            XNamespace presentation = "urn:oasis:names:tc:opendocument:xmlns:presentation:1.0";

            // Column styles
            var automatic_styles = new XElement(office + "automatic-styles");

            bool IsFirstRun = true;

            // Default row styles
            var DefaultRowStyles = new XElement(style + "style", new XAttribute(style + "name", "ro1"), new XAttribute(style + "family", "table-row"),
                    new XElement(style + "table-row-properties", new XAttribute(style + "row-height", "0.178in"), new XAttribute(fo + "break-before", "auto"), new XAttribute(style + "use-optimal-row-height", "true")));
            
            // The spreadsheet element
            XElement spreadsheet = new XElement(office + "spreadsheet");

            // Add the spreadsheet data if any exists
            if (Worksheets.Count == 0)
            {
                spreadsheet.Add(new XElement(table + "calculation-settings", new XAttribute(table + "automatic-find-labels", "false"), new XAttribute(table + "use-regular-expressions", "false"), new XAttribute(table + "use-wildcards", "true")),
                    new XElement(table + "table", new XAttribute(table + "name", "Sheet1"), new XAttribute(table + "style-name", "ta1"),
                        new XElement(table + "table-column", new XAttribute(table + "style-name", "co1"), new XAttribute(table + "default-cell-style-name", "Default")),
                        new XElement(table + "table-row", new XAttribute(table + "style-name", "ro1"),
                            new XElement(table + "table-cell"))));
            }
            else
            {
                var dts = new List<DataDefinition>();
                var table_styles = new List<XElement>();
                var number_styles = new List<XElement>();
                var cell_styles = new List<XElement>();

#if NET6_0_OR_GREATER
                // Iterate the worksheets
                var sheets = CollectionsMarshal.AsSpan(Worksheets);
                for (int i = 0; i < sheets.Length; i++)
                {
                    // Create the table element
                    var sheet_table = new XElement(table + "table", new XAttribute(table + "name", sheets[i].Name), new XAttribute(table + "style-name", $"ta{i + 1}"));

                    // Add the styles
                    if (sheets[i].GetColumnCount() > 0)
                    {
                        for (int col = 0; col < sheets[i].GetColumnWidths().Count; col++)
                        {
                            // Add the columns to the styles
                            table_styles.Add(new XElement(style + "style", new XAttribute(style + "name", $"co{col + 1}"), new XAttribute(style + "family", "table-column"),
                                     new XElement(style + "table-column-properties", new XAttribute(fo + "break-before", "auto"), new XAttribute(style + "column-width", sheets[i].GetColumnWidths()[col]))));

                            // Add the columns to the worksheet table
                            sheet_table.Add(new XElement(table + "table-column", new XAttribute(table + "style-name", $"co{col + 1}"), new XAttribute(table + "default-cell-style-name", "Default")));
                        }
                    }

                    // Add the remaining styles
                    if (table_styles.Contains(DefaultRowStyles) == false)
                    {
                        table_styles.Add(DefaultRowStyles);
                    }

                    // Add the tab (worksheet) styles
                    if (String.IsNullOrEmpty(sheets[i].TabColor) == false)
                    {
                        table_styles.Add(new XElement(style + "style", new XAttribute(style + "name", $"ta{i + 1}"), new XAttribute(style + "family", "table"), new XAttribute(style + "master-page-name", "Default"),
                            new XElement(style + "table-properties", new XAttribute(table + "display", "true"), new XAttribute(style + "writing-mode", "lr-tb"), new XAttribute(table + "tab-color", sheets[i].TabColor))));
                    }
                    else
                    {
                        table_styles.Add(new XElement(style + "style", new XAttribute(style + "name", $"ta{i + 1}"), new XAttribute(style + "family", "table"), new XAttribute(style + "master-page-name", "Default"),
                                new XElement(style + "table-properties", new XAttribute(table + "display", "true"), new XAttribute(style + "writing-mode", "lr-tb"))));
                    }

                    // Add a string
                    if (IsFirstRun == true)
                    {
                        var _type = GetDataType(DataType.String);
                        _type.Worksheet = sheets[i].Name;
                        dts.Add(_type);
                    }

                    // Get the cell datatypes
                    // Iterate the rows
                    for (int r = 0; r < sheets[i].Rows.Count; r++)
                    {
                        var sheet_row = new XElement(table + "table-row", new XAttribute(table + "style-name", "ro1"));

                        // Iterate the cells
                        for (int c = 0; c < sheets[i].Rows[r].Count; c++)
                        {
                            var type = GetDataType(sheets[i].Rows[r][c].DataType);
                            if (type != null)
                            {
                                bool InList = false;
                                for (int t = 0; t < dts.Count; t++)
                                {
                                    if ((type.DataType == dts[t].DataType) || type.DataType == DataType.String)
                                    {
                                        InList = true;
                                    }
                                }

                                if (InList == false)
                                {
                                    type.Worksheet = sheets[i].Name;
                                    dts.Add(type);
                                }
                            }

                            // Formated numeric value
                            if (type != null)
                            {
                                sheet_row.Add(GetTableValues(sheets[i].Rows[r][c], type.Index));
                            }
                            else
                            {
                                sheet_row.Add(GetTableValues(sheets[i].Rows[r][c], 0));
                            }
                        }

                        // Add the row to the sheet table
                        sheet_table.Add(sheet_row);
                    }

                    spreadsheet.Add(sheet_table);
                    IsFirstRun = false;
                }
#elif NETSTANDARD2_0_OR_GREATER
                // Iterate the worksheets
                for (int i = 0; i < Worksheets.Count; i++)
                {
                    // Create the table element
                    var sheet_table = new XElement(table + "table", new XAttribute(table + "name", Worksheets[i].Name), new XAttribute(table + "style-name", $"ta{i + 1}"));

                    // Add the styles
                    if (Worksheets[i].GetColumnCount() > 0)
                    {
                        for (int col = 0; col < Worksheets[i].GetColumnWidths().Count; col++)
                        {
                            // Add the columns to the styles
                            table_styles.Add(new XElement(style + "style", new XAttribute(style + "name", $"co{col + 1}"), new XAttribute(style + "family", "table-column"),
                                     new XElement(style + "table-column-properties", new XAttribute(fo + "break-before", "auto"), new XAttribute(style + "column-width", Worksheets[i].GetColumnWidths()[col]))));

                            // Add the columns to the worksheet table
                            sheet_table.Add(new XElement(table + "table-column", new XAttribute(table + "style-name", $"co{col + 1}"), new XAttribute(table + "default-cell-style-name", "Default")));
                        }
                    }

                    // Add the remaining styles
                    if (table_styles.Contains(DefaultRowStyles) == false)
                    {
                        table_styles.Add(DefaultRowStyles);
                    }

                    // Add the tab (worksheet) styles
                    if (String.IsNullOrEmpty(Worksheets[i].TabColor) == false)
                    {
                        table_styles.Add(new XElement(style + "style", new XAttribute(style + "name", $"ta{i + 1}"), new XAttribute(style + "family", "table"), new XAttribute(style + "master-page-name", "Default"),
                            new XElement(style + "table-properties", new XAttribute(table + "display", "true"), new XAttribute(style + "writing-mode", "lr-tb"), new XAttribute(table + "tab-color", Worksheets[i].TabColor))));
                    }
                    else
                    {
                        table_styles.Add(new XElement(style + "style", new XAttribute(style + "name", $"ta{i + 1}"), new XAttribute(style + "family", "table"), new XAttribute(style + "master-page-name", "Default"),
                                new XElement(style + "table-properties", new XAttribute(table + "display", "true"), new XAttribute(style + "writing-mode", "lr-tb"))));
                    }

                    // Add a string
                    if (IsFirstRun == true)
                    {
                        var _type = GetDataType(DataType.String);
                        _type.Worksheet = Worksheets[i].Name;
                        dts.Add(_type);
                    }
                    
                    // Get the cell datatypes
                    // Iterate the rows
                    for (int r = 0; r < Worksheets[i].Rows.Count; r++)
                    {
                        var sheet_row = new XElement(table + "table-row", new XAttribute(table + "style-name", "ro1"));

                        // Iterate the cells
                        for (int c = 0; c < Worksheets[i].Rows[r].Count; c++)
                        {
                            var type = GetDataType(Worksheets[i].Rows[r][c].DataType);
                            if (type != null)
                            {
                                bool InList = false;
                                for (int t = 0; t < dts.Count; t++)
                                {
                                    if ((type.DataType == dts[t].DataType) || type.DataType == DataType.String)
                                    {
                                        InList = true;
                                    }
                                }

                                if (InList == false)
                                {
                                    type.Worksheet = Worksheets[i].Name;
                                    dts.Add(type);
                                }
                            }

                            // Formated numeric value
                            if (type != null)
                            {
                                sheet_row.Add(GetTableValues(Worksheets[i].Rows[r][c], type.Index));
                            }
                            else
                            {
                                sheet_row.Add(GetTableValues(Worksheets[i].Rows[r][c], 0));
                            }
                        }

                        // Add the row to the sheet table
                        sheet_table.Add(sheet_row);
                    }

                    spreadsheet.Add(sheet_table);
                    IsFirstRun = false;
                }
#endif

                var l = new List<DataType>();
                if (dts.Count > 0)
                {
                    for (int i = 0; i < dts.Count; i++)
                    {
                        if (l.Contains(dts[i].DataType) == false)
                        {
                            cell_styles.Add(new XElement(style + "style", new XAttribute(style + "name", $"ce{dts[i].Index}"), new XAttribute(style + "family", "table-cell"), new XAttribute(style + "parent-style-name", "Default"), new XAttribute(style + "data-style-name", dts[i].Name),
                                        new XElement(style + "text-properties", new XAttribute(fo + "font-size", $"{FontSize}pt"), new XAttribute(style + "font-size-asian", $"{FontSize}pt"), new XAttribute(style + "font-size-complex", $"{FontSize}pt"))));

                            number_styles.Add(dts[i].Element);
                            l.Add(dts[i].DataType);
                        }
                    }
                }

                // Add the styles
                for (int i = 0; i < table_styles.Count; i++)
                {
                    automatic_styles.Add(table_styles[i]);
                }
                for (int i = 0; i < number_styles.Count; i++)
                {
                    automatic_styles.Add(number_styles[i]);
                }
                for (int i = 0; i < cell_styles.Count; i++)
                {
                    automatic_styles.Add(cell_styles[i]);
                }
            }       

            var content = new XElement(office + "document-content",
                    new XAttribute(XNamespace.Xmlns + "meta", meta),
                    new XAttribute(XNamespace.Xmlns + "office", office),
                    new XAttribute(XNamespace.Xmlns + "fo", fo),
                    new XAttribute(XNamespace.Xmlns + "ooo", ooo),
                    new XAttribute(XNamespace.Xmlns + "xlink", xlink),
                    new XAttribute(XNamespace.Xmlns + "dc", dc),
                    new XAttribute(XNamespace.Xmlns + "style", style),
                    new XAttribute(XNamespace.Xmlns + "text", text),
                    new XAttribute(XNamespace.Xmlns + "draw", draw),
                    new XAttribute(XNamespace.Xmlns + "dr3d", dr3d),
                    new XAttribute(XNamespace.Xmlns + "svg", svg),
                    new XAttribute(XNamespace.Xmlns + "chart", chart),
                    new XAttribute(XNamespace.Xmlns + "rpt", rpt),
                    new XAttribute(XNamespace.Xmlns + "table", table),
                    new XAttribute(XNamespace.Xmlns + "number", number),
                    new XAttribute(XNamespace.Xmlns + "ooow", ooow),
                    new XAttribute(XNamespace.Xmlns + "oooc", oooc),
                    new XAttribute(XNamespace.Xmlns + "of", of),
                    new XAttribute(XNamespace.Xmlns + "tableooo", tableooo),
                    new XAttribute(XNamespace.Xmlns + "calcext", calcext),
                    new XAttribute(XNamespace.Xmlns + "drawooo", drawooo),
                    new XAttribute(XNamespace.Xmlns + "loext", loext),
                    new XAttribute(XNamespace.Xmlns + "field", field),
                    new XAttribute(XNamespace.Xmlns + "math", math),
                    new XAttribute(XNamespace.Xmlns + "form", form),
                    new XAttribute(XNamespace.Xmlns + "script", script),
                    new XAttribute(XNamespace.Xmlns + "dom", dom),
                    new XAttribute(XNamespace.Xmlns + "xforms", xforms),
                    new XAttribute(XNamespace.Xmlns + "xsd", xsd),
                    new XAttribute(XNamespace.Xmlns + "xsi", xsi),
                    new XAttribute(XNamespace.Xmlns + "formx", formx),
                    new XAttribute(XNamespace.Xmlns + "xhtml", xhtml),
                    new XAttribute(XNamespace.Xmlns + "grddl", grddl),
                    new XAttribute(XNamespace.Xmlns + "css3t", css3t),
                    new XAttribute(XNamespace.Xmlns + "presentation", presentation),
                    new XAttribute(office + "version", "1.3"),
                    new XElement(office + "scripts"),
                    new XElement(office + "font-face-decls",
                        new XElement(style + "font-face", new XAttribute(style + "name", "Liberation Sans"), new XAttribute(svg + "font-family", "'Liberation Sans'"), new XAttribute(style + "font-family-generic", "swiss"), new XAttribute(style + "font-pitch", "variable")),
                        new XElement(style + "font-face", new XAttribute(style + "name", "Lucida Sans"), new XAttribute(svg + "font-family", "'Lucida Sans'"), new XAttribute(style + "font-family-generic", "system"), new XAttribute(style + "font-pitch", "variable")),
                        new XElement(style + "font-face", new XAttribute(style + "name", "Microsoft YaHei"), new XAttribute(svg + "font-family", "'Microsoft YaHei'"), new XAttribute(style + "font-family-generic", "system"), new XAttribute(style + "font-pitch", "variable"))),
                    automatic_styles,
                    new XElement(office + "body",
                        spreadsheet,
                            new XElement(table + "named-expressions")));

            return new XDocument(new XDeclaration("1.0", "UTF-8", null), content);
        }

        /// <summary>
        /// A manifest of the document's contents
        /// </summary>
        /// <returns></returns>
        internal XDocument meta_inf_manifest()
        {
            XNamespace manifest = "urn:oasis:names:tc:opendocument:xmlns:manifest:1.0";
            XNamespace loext = "urn:org:documentfoundation:names:experimental:office:xmlns:loext:1.0";

            var _manifest = new XElement(manifest + "manifest",
                new XAttribute(XNamespace.Xmlns + "manifest", manifest),
                new XAttribute(manifest + "version", "1.3"),
                new XAttribute(XNamespace.Xmlns + "loext", loext),
                new XElement(manifest + "file-entry", new XAttribute(manifest + "full-path", "/"), new XAttribute(manifest + "version", "1.3"), new XAttribute(manifest + "media-type", "application/vnd.oasis.opendocument.spreadsheet")),
                new XElement(manifest + "file-entry", new XAttribute(manifest + "full-path", "Configurations2/"), new XAttribute(manifest + "media-type", "application/vnd.sun.xml.ui.configuration")),
                new XElement(manifest + "file-entry", new XAttribute(manifest + "full-path", "manifest.rdf"), new XAttribute(manifest + "media-type", "application/rdf+xml")),
                new XElement(manifest + "file-entry", new XAttribute(manifest + "full-path", "styles.xml"), new XAttribute(manifest + "media-type", "text/xml")),
                new XElement(manifest + "file-entry", new XAttribute(manifest + "full-path", "meta.xml"), new XAttribute(manifest + "media-type", "text/xml")),
                new XElement(manifest + "file-entry", new XAttribute(manifest + "full-path", "content.xml"), new XAttribute(manifest + "media-type", "text/xml")),
                new XElement(manifest + "file-entry", new XAttribute(manifest + "full-path", "Thumbnails/thumbnail.png"), new XAttribute(manifest + "media-type", "image/png")),
                new XElement(manifest + "file-entry", new XAttribute(manifest + "full-path", "settings.xml"), new XAttribute(manifest + "media-type", "text/xml")));

            return new XDocument(new XDeclaration("1.0", "UTF-8", null), _manifest);
        }

        /// <summary>
        /// A method for getting a data type definition
        /// </summary>
        /// <param name="DataType">The data type</param>
        /// <returns></returns>
        private DataDefinition GetDataType(DataType DataType)
        {
            XNamespace number = "urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0";
            XNamespace style = "urn:oasis:names:tc:opendocument:xmlns:style:1.0";

            DataDefinition x = null;
            switch (DataType)
            {
                case DataType.String:
                    x = new DataDefinition();
                    x.Index = 1;
                    x.Name = "String";
                    x.DataType = DataType.String;
                    x.Element = null;
                    break;
                case DataType.DateTime:
                    x = new DataDefinition();
                    x.Index = 2;
                    x.Name = "N54";
                    x.DataType = DataType.DateTime;
                    x.Element = new XElement(number + "date-style", new XAttribute(style + "name", "N54"), new XAttribute(number + "automatic-order", "true"),
                        new XElement(number + "month", new XAttribute(number + "style", "long")),
                        new XElement(number + "text", "/"),
                        new XElement(number + "day", new XAttribute(number + "style", "long")),
                        new XElement(number + "text", "/"),
                        new XElement(number + "year", new XAttribute(number + "style", "long")),
                        new XElement(number + "text", " "),
                        new XElement(number + "hours", new XAttribute(number + "style", "long")),
                        new XElement(number + "text", ":"),
                        new XElement(number + "minutes", new XAttribute(number + "style", "long")),
                        new XElement(number + "text", " "),
                        new XElement(number + "am-pm"));
                    break;
                case DataType.Date:
                    x = new DataDefinition();
                    x.Index = 3;
                    x.Name = "N36";
                    x.DataType = DataType.Date;
                    x.Element = new XElement(number + "date-style", new XAttribute(style + "name", "N36"), new XAttribute(number + "automatic-order", "true"),
                        new XElement(number + "month", new XAttribute(number + "style", "long")),
                        new XElement(number + "text", "/"),
                        new XElement(number + "day", new XAttribute(number + "style", "long")),
                        new XElement(number + "text", "/"),
                        new XElement(number + "year", new XAttribute(number + "style", "long")));
                    break;
                case DataType.Time:
                    x = new DataDefinition();
                    x.Index = 4;
                    x.Name = "N43";
                    x.DataType = DataType.Time;
                    x.Element = new XElement(number + "date-style", new XAttribute(style + "name", "N43"),
                        new XElement(number + "hours", new XAttribute(number + "style", "long")),
                        new XElement(number + "text", ":"),
                        new XElement(number + "minutes", new XAttribute(number + "style", "long")),
                        new XElement(number + "text", ":"),
                        new XElement(number + "seconds", new XAttribute(number + "style", "long")),
                        new XElement(number + "text", " "),
                        new XElement(number + "am-pm"));
                    break;
                case DataType.LongDate:
                    x = new DataDefinition();
                    x.Index = 5;
                    x.Name = "N76";
                    x.DataType = DataType.LongDate;
                    x.Element = new XElement(number + "date-style", new XAttribute(style + "name", "N76"), new XAttribute(number + "automatic-order", "true"),
                        new XElement(number + "month", new XAttribute(number + "style", "long"), new XAttribute(number + "textual", "true")),
                        new XElement(number + "text", " "),
                        new XElement(number + "day"),
                        new XElement(number + "text", ", "),
                        new XElement(number + "year", new XAttribute(number + "style", "long")));
                    break;
                case DataType.Percent:
                    x = new DataDefinition();
                    x.Index = 6;
                    x.Name = "N10";
                    x.DataType = DataType.Percent;
                    x.Element = new XElement(number + "percentage-style", new XAttribute(style + "name", "N10"),
                        new XElement(number + "number", new XAttribute(number + "decimal-places", "0"), new XAttribute(number + "min-decimal-places", "0"), new XAttribute(number + "min-integer-digits", "1")),
                        new XElement(number + "text", "%"));
                    break;
                case DataType.Time24:
                    x = new DataDefinition();
                    x.Index = 7;
                    x.Name = "N41";
                    x.DataType = DataType.Time24;
                    x.Element = new XElement(number + "time-style", new XAttribute(style + "name", "N41"),
                        new XElement(number + "hours", new XAttribute(number + "style", "long")),
                        new XElement(number + "text", ":"),
                        new XElement(number + "minutes", new XAttribute(number + "style", "long")),
                        new XElement(number + "text", ":"),
                        new XElement(number + "seconds", new XAttribute(number + "style", "long")));
                    break;
                case DataType.DateTime24:
                    x = new DataDefinition();
                    x.Index = 8;
                    x.Name = "N51";
                    x.DataType = DataType.DateTime24;
                    x.Element = new XElement(number + "time-style", new XAttribute(style + "name", "N51"), new XAttribute(number + "automatic-order", "true"),
                         new XElement(number + "month", new XAttribute(number + "style", "long")),
                        new XElement(number + "text", "/"),
                        new XElement(number + "day", new XAttribute(number + "style", "long")),
                        new XElement(number + "text", "/"),
                        new XElement(number + "year", new XAttribute(number + "style", "long")),
                        new XElement(number + "text", " "),
                        new XElement(number + "hours", new XAttribute(number + "style", "long")),
                        new XElement(number + "text", ":"),
                        new XElement(number + "minutes", new XAttribute(number + "style", "long")),
                        new XElement(number + "text", ":"),
                        new XElement(number + "seconds", new XAttribute(number + "style", "long")));
                    break;
                case DataType.Currency:
                    x = new DataDefinition();
                    x.Index = 9;
                    x.Name = "N104P0";
                    x.DataType = DataType.Currency;
                    x.Element = new XElement(number + "currency-style", new XAttribute(style + "name", "N104P0"), new XAttribute(style + "volatile", "true"),
                        new XElement(number + "currency-symbol", new XAttribute(number + "language", CurrencyLanguage), new XAttribute(number + "country", CurrencyCountry), CurrencySymbol),
                        new XElement(number + "number", new XAttribute(number + "decimal-places", CurrencyDecimals), new XAttribute(number + "min-decimal-places", CurrencyDecimals), new XAttribute(number + "min-integer-digits", "1"), new XAttribute(number + "grouping", "true")));
                    break;
                case DataType.Decimal:
                    x = new DataDefinition();
                    x.Index = 10;
                    x.Name = "N121";
                    x.DataType = DataType.Decimal;
                    x.Element = null;
                    break;
                case DataType.Number:
                    x = new DataDefinition();
                    x.Index = 11;
                    x.Name = "Number";
                    x.DataType = DataType.Number;
                    x.Element = null;
                    break;
                case DataType.Boolean:
                    x = new DataDefinition();
                    x.Index = 12;
                    x.Name = "N99";
                    x.DataType = DataType.Boolean;
                    x.Element = null;
                    break;
            }
            return x;
        }

        /// <summary>
        /// A method that supplies the data that appears in the file
        /// </summary>
        /// <param name="cell"></param>
        /// <param name="index"></param>
        /// <returns></returns>
        private XElement GetTableValues(IDataCell cell, int index)
        {
            XNamespace text = "urn:oasis:names:tc:opendocument:xmlns:text:1.0";
            XNamespace office = "urn:oasis:names:tc:opendocument:xmlns:office:1.0";
            XNamespace table = "urn:oasis:names:tc:opendocument:xmlns:table:1.0";
            XNamespace calcext = "urn:org:documentfoundation:names:experimental:calc:xmlns:calcext:1.0";

            if (cell.Value == null)
            {
                return new XElement(table + "table-cell", new XAttribute(table + "style-name", String.Empty), new XAttribute(office + "value-type", "string"), new XAttribute(calcext + "value-type", "string"),
                        new XElement(text + "p", String.Empty)); ;
            }

            XElement x = null;
            switch (cell.DataType)
            {
                case DataType.String:
                    x = new XElement(table + "table-cell", new XAttribute(table + "style-name", $"ce1"), new XAttribute(office + "value-type", "string"), new XAttribute(calcext + "value-type", "string"),
                        new XElement(text + "p", cell.Value));
                    break;
                case DataType.DateTime:
                    x = new XElement(table + "table-cell", new XAttribute(table + "style-name", $"ce{index}"), new XAttribute(office + "value-type", "date"), new XAttribute(office + "date-value", cell.Value), new XAttribute(calcext + "value-type", "date"),
                        new XElement(text + "p", cell.FormattedValue));
                    break;
                case DataType.Date:
                    x = new XElement(table + "table-cell", new XAttribute(table + "style-name", $"ce{index}"), new XAttribute(office + "value-type", "date"), new XAttribute(office + "date-value", cell.Value), new XAttribute(calcext + "value-type", "date"),
                        new XElement(text + "p", cell.FormattedValue));
                    break;
                case DataType.Time:
                    x = new XElement(table + "table-cell", new XAttribute(table + "style-name", $"ce{index}"), new XAttribute(office + "value-type", "time"), new XAttribute(office + "time-value", cell.Value), new XAttribute(calcext + "value-type", "time"),
                        new XElement(text + "p", cell.FormattedValue));
                    break;
                case DataType.LongDate:
                    x = new XElement(table + "table-cell", new XAttribute(table + "style-name", $"ce{index}"), new XAttribute(office + "value-type", "date"), new XAttribute(office + "date-value", cell.Value), new XAttribute(calcext + "value-type", "date"),
                        new XElement(text + "p", cell.FormattedValue));
                    break;
                case DataType.Time24:
                    x = new XElement(table + "table-cell", new XAttribute(table + "style-name", $"ce{index}"), new XAttribute(office + "value-type", "time"), new XAttribute(office + "time-value", cell.Value), new XAttribute(calcext + "value-type", "time"),
                        new XElement(text + "p", cell.FormattedValue));
                    break;
                case DataType.DateTime24:
                    x = new XElement(table + "table-cell", new XAttribute(table + "style-name", $"ce{index}"), new XAttribute(office + "value-type", "date"), new XAttribute(office + "date-value", cell.Value), new XAttribute(calcext + "value-type", "date"),
                        new XElement(text + "p", cell.FormattedValue));
                    break;
                case DataType.Number:
                    x = new XElement(table + "table-cell", new XAttribute(table + "style-name", $"ce{index}"), new XAttribute(office + "value-type", "float"), new XAttribute(office + "value", cell.Value), new XAttribute(calcext + "value-type", "float"),
                        new XElement(text + "p", cell.FormattedValue));
                    break;
                case DataType.Currency:
                    x = new XElement(table + "table-cell", new XAttribute(table + "style-name", $"ce{index}"), new XAttribute(office + "value-type", "currency"), new XAttribute(office + "currency", "USD"), new XAttribute(office + "value", cell.Value), new XAttribute(calcext + "value-type", "currency"),
                        new XElement(text + "p", cell.FormattedValue));
                    break;
                case DataType.Decimal:
                    x = new XElement(table + "table-cell", new XAttribute(table + "style-name", $"ce{index}"), new XAttribute(office + "value-type", "float"), new XAttribute(office + "value", cell.Value), new XAttribute(calcext + "value-type", "float"),
                       new XElement(text + "p", cell.FormattedValue));
                    break;
                case DataType.Percent:
                    x = new XElement(table + "table-cell", new XAttribute(table + "style-name", $"ce{index}"), new XAttribute(office + "value-type", "float"), new XAttribute(office + "value", cell.Value), new XAttribute(calcext + "value-type", "float"),
                        new XElement(text + "p", cell.FormattedValue));
                    break;
                case DataType.Boolean:
                    x = new XElement(table + "table-cell", new XAttribute(table + "style-name", $"ce{index}"), new XAttribute(office + "value-type", "boolean"), new XAttribute(office + "boolean-value", cell.Value), new XAttribute(calcext + "value-type", "boolean"),
                        new XElement(text + "p", cell.FormattedValue));
                    break;
            }
            return x;
        }
    }
}
